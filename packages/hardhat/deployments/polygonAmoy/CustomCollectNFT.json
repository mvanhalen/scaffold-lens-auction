{
  "address": "0x6511B9CE24E1198F4803e652B58ABB687484A6d0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actionModule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Initialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotActionModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProfileOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_MODULE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSourcePublicationPointer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "royalty",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintTimestampOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltiesInBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenDataOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            }
          ],
          "internalType": "struct Types.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1c8e726518099544bd81e662fbf7d3180c18c61cbe98ff541b0aa04d026a7fd",
  "receipt": {
    "to": null,
    "from": "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4",
    "contractAddress": "0x6511B9CE24E1198F4803e652B58ABB687484A6d0",
    "transactionIndex": 4,
    "gasUsed": "2172051",
    "logsBloom": "0x
    "blockHash": "0xb6e8a781e19b253e15404fabec81319a4ad4e8ee2a3fc240e10003ba78d34d3c",
    "transactionHash": "0xe1c8e726518099544bd81e662fbf7d3180c18c61cbe98ff541b0aa04d026a7fd",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 6790589,
        "transactionHash": "0xe1c8e726518099544bd81e662fbf7d3180c18c61cbe98ff541b0aa04d026a7fd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4",
          "0x0000000000000000000000006ab3d36c46ecfb9b9c0bd51cb1c3da5a2c81cea6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000087d04091e310000000000000000000000000000000000000000000000000016647941e26c1fc700000000000000000000000000000000000000000000017b1f0604073adf1228000000000000000000000000000000000000000000000000165bfc3dd94deec700000000000000000000000000000000000000000000017b1f0e810b43fd4328",
        "logIndex": 39,
        "blockHash": "0xb6e8a781e19b253e15404fabec81319a4ad4e8ee2a3fc240e10003ba78d34d3c"
      }
    ],
    "blockNumber": 6790589,
    "cumulativeGasUsed": "3619964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0xBA8670dB2EBa711fA588F0745bBaC8396aa51e7e"
  ],
  "numDeployments": 3,
  "solcInputHash": "997247cb3e9eab2cd37dc0714645ee0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actionModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActionModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProfileOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_MODULE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSourcePublicationPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"royalty\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltiesInBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"}],\"internalType\":\"struct Types.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Paul Burke\",\"details\":\"This is a customizable CollectNFT, it differs from the v2 CollectNFT in that the the name and symbol can be set.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"exists(uint256)\":{\"details\":\"See {IERC721Timestamped-exists}\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"bytes32 The domain separator.\"}},\"getSourcePublicationPointer()\":{\"returns\":{\"_0\":\"tuple First is the profile ID, and second is the publication ID.\"}},\"initialize(uint256,uint256,string,string,uint16)\":{\"params\":{\"profileId\":\"The token ID of the profile in the hub that this Collect NFT points to.\",\"pubId\":\"The profile publication ID in the hub that this Collect NFT points to.\",\"royalty\":\"The royalty percentage.\",\"tokenName\":\"The name of the token.\",\"tokenSymbol\":\"The symbol of the token.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"params\":{\"to\":\"The address to mint the NFT to.\"},\"returns\":{\"_0\":\"uint256 An integer representing the minted token ID.\"}},\"mintTimestampOf(uint256)\":{\"details\":\"See {IERC721Timestamped-mintTimestampOf}\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nonces(address)\":{\"params\":{\"signer\":\"The address for which to query the nonce.\"},\"returns\":{\"_0\":\"uint256 The current nonce of the given signer.\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"salePrice\":\"The sale price of the token specified.\",\"tokenId\":\"The ID of the token queried for royalty information.\"},\"returns\":{\"_0\":\"A tuple with the address that should receive the royalties and the royalty payment amount for the given sale price.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setRoyalty(uint256)\":{\"params\":{\"royaltiesInBasisPoints\":\"The royalty percentage (measured in basis points).\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenDataOf(uint256)\":{\"details\":\"See {IERC721Timestamped-tokenDataOf}\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 The current total supply of tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"CustomCollectNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDomainSeparator()\":{\"notice\":\"Returns the EIP-712 domain separator for this contract.\"},\"getSourcePublicationPointer()\":{\"notice\":\"Returns the source publication of this collect NFT.\"},\"initialize(uint256,uint256,string,string,uint16)\":{\"notice\":\"Initializes the collect NFT, setting the feed as the privileged minter, storing the collected publication pointer and initializing the name and symbol in the LensNFTBase contract.\"},\"mint(address)\":{\"notice\":\"Mints a collect NFT to the specified address. This can only be called by the hub and is called upon collection.\"},\"nonces(address)\":{\"notice\":\"Returns the current signature nonce of the given signer.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Called with the sale price to determine how much royalty is owed and to whom.\"},\"setRoyalty(uint256)\":{\"notice\":\"Changes the royalty percentage for secondary sales.\"},\"totalSupply()\":{\"notice\":\"Returns the amount of tokens in circulation.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CustomCollectNFT.sol\":\"CustomCollectNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CustomCollectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport {ERC2981CollectionRoyalties} from \\\"lens-modules/contracts/base/ERC2981CollectionRoyalties.sol\\\";\\nimport {Errors} from \\\"lens-modules/contracts/libraries/constants/Errors.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ILensHub} from \\\"lens-modules/contracts/interfaces/ILensHub.sol\\\";\\nimport {LensBaseERC721} from \\\"lens-modules/contracts/base/LensBaseERC721.sol\\\";\\nimport {ActionRestricted} from \\\"lens-modules/contracts/modules/ActionRestricted.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ICustomCollectNFT} from \\\"./interfaces/ICustomCollectNFT.sol\\\";\\n\\n/**\\n * @title CustomCollectNFT\\n * @author Paul Burke\\n *\\n * @dev This is a customizable CollectNFT, it differs from the v2 CollectNFT in that the the name and symbol can be set.\\n */\\ncontract CustomCollectNFT is\\n    LensBaseERC721,\\n    ERC2981CollectionRoyalties,\\n    ActionRestricted,\\n    ICustomCollectNFT\\n{\\n    using Strings for uint256;\\n\\n    address public immutable HUB;\\n\\n    uint256 internal _profileId;\\n    uint256 internal _pubId;\\n    uint256 internal _tokenIdCounter;\\n\\n    bool private _initialized;\\n    string private _name;\\n    string private _symbol;\\n\\n    uint256 internal _royaltiesInBasisPoints;\\n\\n    constructor(\\n        address hub,\\n        address actionModule\\n    ) ActionRestricted(actionModule) {\\n        HUB = hub;\\n        _initialized = true;\\n    }\\n\\n    /// @inheritdoc ICustomCollectNFT\\n    function initialize(\\n        uint256 profileId,\\n        uint256 pubId,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint16 royalty\\n    ) external override {\\n        if (_initialized) revert Errors.Initialized();\\n        _initialized = true;\\n        _setRoyalty(royalty);\\n        _profileId = profileId;\\n        _pubId = pubId;\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    /// @inheritdoc ICustomCollectNFT\\n    function mint(\\n        address to\\n    ) external override onlyActionModule returns (uint256) {\\n        unchecked {\\n            uint256 tokenId = ++_tokenIdCounter;\\n            _mint(to, tokenId);\\n            return tokenId;\\n        }\\n    }\\n\\n    /// @inheritdoc ICustomCollectNFT\\n    function getSourcePublicationPointer()\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return (_profileId, _pubId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        if (!_exists(tokenId)) revert Errors.TokenDoesNotExist();\\n        return ILensHub(HUB).getContentURI(_profileId, _pubId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return\\n            bytes(_name).length > 0\\n                ? _name\\n                : string.concat(\\n                    \\\"Lens Collect | Profile #\\\",\\n                    _profileId.toString(),\\n                    \\\" - Publication #\\\",\\n                    _pubId.toString()\\n                );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return bytes(_symbol).length > 0 ? _symbol : \\\"LENS-COLLECT\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC2981CollectionRoyalties, LensBaseERC721)\\n        returns (bool)\\n    {\\n        return\\n            ERC2981CollectionRoyalties.supportsInterface(interfaceId) ||\\n            LensBaseERC721.supportsInterface(interfaceId);\\n    }\\n\\n    function _getReceiver(\\n        uint256 /* tokenId */\\n    ) internal view override returns (address) {\\n        if (!ILensHub(HUB).exists(_profileId)) {\\n            return address(0);\\n        }\\n        return IERC721(HUB).ownerOf(_profileId);\\n    }\\n\\n    function _beforeRoyaltiesSet(\\n        uint256 /* royaltiesInBasisPoints */\\n    ) internal view override {\\n        if (IERC721(HUB).ownerOf(_profileId) != msg.sender) {\\n            revert Errors.NotProfileOwner();\\n        }\\n    }\\n\\n    function _getRoyaltiesInBasisPointsSlot()\\n        internal\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        uint256 slot;\\n        assembly {\\n            slot := _royaltiesInBasisPoints.slot\\n        }\\n        return slot;\\n    }\\n}\\n\",\"keccak256\":\"0x9c1f25b84b287f6b199c090eb6a831ae61d0d5c94394ab1206d439f438f42a11\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomCollectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ICollectNFT\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the CollectNFT contract. Which is cloned upon the first collect for any given\\n * publication.\\n */\\ninterface ICustomCollectNFT {\\n    /**\\n     * @notice Initializes the collect NFT, setting the feed as the privileged minter, storing the collected publication pointer\\n     * and initializing the name and symbol in the LensNFTBase contract.\\n     * @custom:permissions CollectPublicationAction.\\n     *\\n     * @param profileId The token ID of the profile in the hub that this Collect NFT points to.\\n     * @param pubId The profile publication ID in the hub that this Collect NFT points to.\\n     * @param tokenName The name of the token.\\n     * @param tokenSymbol The symbol of the token.\\n     * @param royalty The royalty percentage.\\n     */\\n    function initialize(\\n        uint256 profileId,\\n        uint256 pubId,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint16 royalty\\n    ) external;\\n\\n    /**\\n     * @notice Mints a collect NFT to the specified address. This can only be called by the hub and is called\\n     * upon collection.\\n     * @custom:permissions CollectPublicationAction.\\n     *\\n     * @param to The address to mint the NFT to.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the source publication of this collect NFT.\\n     *\\n     * @return tuple First is the profile ID, and second is the publication ID.\\n     */\\n    function getSourcePublicationPointer()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x391e760789ad453c18fd8e44d29b3f576da4dfe2426614bcab36e90334ef32d9\",\"license\":\"MIT\"},\"lens-modules/contracts/base/ERC2981CollectionRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../libraries/constants/Errors.sol';\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {IERC2981} from '@openzeppelin/contracts/interfaces/IERC2981.sol';\\n\\nabstract contract ERC2981CollectionRoyalties is IERC2981 {\\n    uint16 internal constant BASIS_POINTS = 10000;\\n    // bytes4(keccak256('royaltyInfo(uint256,uint256)')) == 0x2a55205a\\n    bytes4 internal constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == INTERFACE_ID_ERC2981 || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Changes the royalty percentage for secondary sales.\\n     *\\n     * @param royaltiesInBasisPoints The royalty percentage (measured in basis points).\\n     */\\n    function setRoyalty(uint256 royaltiesInBasisPoints) external {\\n        _beforeRoyaltiesSet(royaltiesInBasisPoints);\\n        _setRoyalty(royaltiesInBasisPoints);\\n    }\\n\\n    /**\\n     * @notice Called with the sale price to determine how much royalty is owed and to whom.\\n     *\\n     * @param tokenId The ID of the token queried for royalty information.\\n     * @param salePrice The sale price of the token specified.\\n     * @return A tuple with the address that should receive the royalties and the royalty\\n     * payment amount for the given sale price.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address, uint256) {\\n        return (_getReceiver(tokenId), _getRoyaltyAmount(tokenId, salePrice));\\n    }\\n\\n    function _setRoyalty(uint256 royaltiesInBasisPoints) internal virtual {\\n        if (royaltiesInBasisPoints > BASIS_POINTS) {\\n            revert Errors.InvalidParameter();\\n        }\\n        _storeRoyaltiesInBasisPoints(royaltiesInBasisPoints);\\n    }\\n\\n    function _getRoyaltyAmount(uint256 /* tokenId */, uint256 salePrice) internal view virtual returns (uint256) {\\n        return (salePrice * _loadRoyaltiesInBasisPoints()) / BASIS_POINTS;\\n    }\\n\\n    function _storeRoyaltiesInBasisPoints(uint256 royaltiesInBasisPoints) internal virtual {\\n        uint256 royaltiesInBasisPointsSlot = _getRoyaltiesInBasisPointsSlot();\\n        assembly {\\n            sstore(royaltiesInBasisPointsSlot, royaltiesInBasisPoints)\\n        }\\n    }\\n\\n    function _loadRoyaltiesInBasisPoints() internal view virtual returns (uint256) {\\n        uint256 royaltiesInBasisPointsSlot = _getRoyaltiesInBasisPointsSlot();\\n        uint256 royaltyAmount;\\n        assembly {\\n            royaltyAmount := sload(royaltiesInBasisPointsSlot)\\n        }\\n        return royaltyAmount;\\n    }\\n\\n    function _beforeRoyaltiesSet(uint256 royaltiesInBasisPoints) internal view virtual;\\n\\n    function _getRoyaltiesInBasisPointsSlot() internal view virtual returns (uint256);\\n\\n    function _getReceiver(uint256 tokenId) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x2f3d0844f120cf75697aaa64d31f9deac6dd7190c0f2f3fb985bafc8b172bbd7\",\"license\":\"MIT\"},\"lens-modules/contracts/base/LensBaseERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../libraries/constants/Errors.sol';\\nimport {Types} from '../libraries/constants/Types.sol';\\nimport {MetaTxLib} from '../libraries/MetaTxLib.sol';\\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\\nimport {ERC165} from '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * Modifications:\\n * 1. Refactored _operatorApprovals setter into an internal function to allow meta-transactions.\\n * 2. Constructor replaced with an initializer.\\n * 3. Mint timestamp is now stored in a TokenData struct alongside the owner address.\\n */\\nabstract contract LensBaseERC721 is ERC165, ILensERC721 {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to token Data (owner address and mint timestamp uint96), this\\n    // replaces the original mapping(uint256 => address) private _owners;\\n    mapping(uint256 => Types.TokenData) private _tokenData;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Deprecated in V2 after removing ERC712Enumerable logic.\\n    mapping(address => mapping(uint256 => uint256)) private __DEPRECATED__ownedTokens;\\n    mapping(uint256 => uint256) private __DEPRECATED__ownedTokensIndex;\\n\\n    // Dirty hack on a deprecated slot:\\n    uint256 private _totalSupply; // uint256[] private __DEPRECATED__allTokens;\\n\\n    // Deprecated in V2 after removing ERC712Enumerable logic.\\n    mapping(uint256 => uint256) private __DEPRECATED__allTokensIndex;\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    /**\\n     * @dev Initializes the ERC721 name and symbol.\\n     *\\n     * @param name_ The name to set.\\n     * @param symbol_ The symbol to set.\\n     */\\n    function _initialize(string calldata name_, string calldata symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Timestamped).interfaceId ||\\n            interfaceId == type(IERC721Burnable).interfaceId ||\\n            interfaceId == type(IERC721MetaTx).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function nonces(address signer) public view override returns (uint256) {\\n        return _nonces[signer];\\n    }\\n\\n    /// @inheritdoc IERC721MetaTx\\n    function getDomainSeparator() external view virtual override returns (bytes32) {\\n        return MetaTxLib.calculateDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) {\\n            revert Errors.InvalidParameter();\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _tokenData[tokenId].owner;\\n        if (owner == address(0)) {\\n            revert Errors.TokenDoesNotExist();\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Timestamped-mintTimestampOf}\\n     */\\n    function mintTimestampOf(uint256 tokenId) public view virtual override returns (uint256) {\\n        uint96 mintTimestamp = _tokenData[tokenId].mintTimestamp;\\n        if (mintTimestamp == 0) {\\n            revert Errors.TokenDoesNotExist();\\n        }\\n        return mintTimestamp;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Timestamped-tokenDataOf}\\n     */\\n    function tokenDataOf(uint256 tokenId) public view virtual override returns (Types.TokenData memory) {\\n        if (!_exists(tokenId)) {\\n            revert Errors.TokenDoesNotExist();\\n        }\\n        return _tokenData[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Timestamped-exists}\\n     */\\n    function exists(uint256 tokenId) public view virtual override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        if (to == owner) {\\n            revert Errors.InvalidParameter();\\n        }\\n\\n        if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n            revert Errors.NotOwnerOrApproved();\\n        }\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) {\\n            revert Errors.TokenDoesNotExist();\\n        }\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == msg.sender) {\\n            revert Errors.InvalidParameter();\\n        }\\n\\n        _setOperatorApproval(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert Errors.NotOwnerOrApproved();\\n        }\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert Errors.NotOwnerOrApproved();\\n        }\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Burns `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual override {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) {\\n            revert Errors.NotOwnerOrApproved();\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns the owner of the `tokenId` token.\\n     *\\n     * @dev It is prefixed as `unsafe` as it does not revert when the token does not exist.\\n     *\\n     * @param tokenId The token whose owner is being queried.\\n     *\\n     * @return address The address owning the given token, zero address if the token does not exist.\\n     */\\n    function _unsafeOwnerOf(uint256 tokenId) internal view returns (address) {\\n        return _tokenData[tokenId].owner;\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform a token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert Errors.NonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenData[tokenId].owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        // We don't check owner for != address(0) cause it's done inside ownerOf()\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        if (to == address(0) || _exists(tokenId)) {\\n            revert Errors.InvalidParameter();\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        unchecked {\\n            ++_balances[to];\\n            ++_totalSupply;\\n        }\\n        _tokenData[tokenId].owner = to;\\n        _tokenData[tokenId].mintTimestamp = uint96(block.timestamp);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        unchecked {\\n            --_balances[owner];\\n            --_totalSupply;\\n        }\\n        delete _tokenData[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        if (ownerOf(tokenId) != from) {\\n            revert Errors.InvalidOwner();\\n        }\\n        if (to == address(0)) {\\n            revert Errors.InvalidParameter();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        unchecked {\\n            --_balances[from];\\n            ++_balances[to];\\n        }\\n        _tokenData[tokenId].owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Refactored from the original OZ ERC721 implementation: approve or revoke approval from\\n     * `operator` to operate on all tokens owned by `owner`.\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setOperatorApproval(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert Errors.NonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4430866bb7a4634348c7a44da89a9409da341363ed4528c630908872b5901f3e\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title IERC721Burnable\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including a function that allows the token to be burned.\\n */\\ninterface IERC721Burnable {\\n    /**\\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it.\\n     * @custom:permission Owner of the NFT.\\n     *\\n     * @param tokenId The token ID of the token to burn.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x21bb0e27eec4f6311885d2627ae7d70d04add3f5f0c9c794dc3fb3da67542550\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721MetaTx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title IERC721MetaTx\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including meta-tx signatures related functions.\\n */\\ninterface IERC721MetaTx {\\n    /**\\n     * @notice Returns the current signature nonce of the given signer.\\n     *\\n     * @param signer The address for which to query the nonce.\\n     *\\n     * @return uint256 The current nonce of the given signer.\\n     */\\n    function nonces(address signer) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the EIP-712 domain separator for this contract.\\n     *\\n     * @return bytes32 The domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc0fb246632c57e9ce8f49fe0052cc377b7348e419eb56c379c73abb70ffdf32d\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IERC721Timestamped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title IERC721Timestamped\\n * @author Lens Protocol\\n *\\n * @notice Extension of ERC-721 including a struct for token data, which contains the owner and the mint timestamp, as\\n * well as their associated getters.\\n */\\ninterface IERC721Timestamped {\\n    /**\\n     * @notice Returns the mint timestamp associated with a given NFT.\\n     *\\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\\n     *\\n     * @return uint256 Mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\\n     * padding.\\n     */\\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\\n     * mint timestamp in a single call.\\n     *\\n     * @param tokenId The token ID of the NFT to query the token data for.\\n     *\\n     * @return TokenData A struct containing both the owner address and the mint timestamp.\\n     */\\n    function tokenDataOf(uint256 tokenId) external view returns (Types.TokenData memory);\\n\\n    /**\\n     * @notice Returns whether a token with the given token ID exists.\\n     *\\n     * @param tokenId The token ID of the NFT to check existence for.\\n     *\\n     * @return bool True if the token exists.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of tokens in circulation.\\n     *\\n     * @return uint256 The current total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd642fb00ccde8bb98906cb7e0b82784c6bd6cd7ac9e7f5d0abb4bf4897c5d6d9\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {IERC721Timestamped} from '../interfaces/IERC721Timestamped.sol';\\nimport {IERC721Burnable} from '../interfaces/IERC721Burnable.sol';\\nimport {IERC721MetaTx} from '../interfaces/IERC721MetaTx.sol';\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\ninterface ILensERC721 is IERC721, IERC721Timestamped, IERC721Burnable, IERC721MetaTx, IERC721Metadata {}\\n\",\"keccak256\":\"0xc5dd83acafed38333a2ee431673ee8d70aecc5bc83931f1a3096bc6af496d3f3\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensGovernable\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the Lens Protocol main governance functions.\\n */\\ninterface ILensGovernable {\\n    /**\\n     * @notice Sets the privileged governance role.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state.\\n     * @custom:permissions Governance or Emergency Admin. Emergency Admin can only restrict more.\\n     *\\n     * @param newState The state to set. It can be one of the following:\\n     *  - Unpaused: The protocol is fully operational.\\n     *  - PublishingPaused: The protocol is paused for publishing, but it is still operational for others operations.\\n     *  - Paused: The protocol is paused for all operations.\\n     */\\n    function setState(Types.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\\n\\n    /**\\n     * @notice Sets the profile token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileTokenURIContract The profile token URI contract to set.\\n     */\\n    function setProfileTokenURIContract(address profileTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the follow token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param followTokenURIContract The follow token URI contract to set.\\n     */\\n    function setFollowTokenURIContract(address followTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the treasury address.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasury The new treasury address to set.\\n     */\\n    function setTreasury(address newTreasury) external;\\n\\n    /**\\n     * @notice Sets the treasury fee.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasuryFee The new treasury fee to set.\\n     */\\n    function setTreasuryFee(uint16 newTreasuryFee) external;\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Gets the state currently set in the protocol. It could be a global pause, a publishing pause or an\\n     * unpaused state.\\n     * @custom:permissions Anyone.\\n     *\\n     * @return Types.ProtocolState The state currently set in the protocol.\\n     */\\n    function getState() external view returns (Types.ProtocolState);\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the treasury address.\\n     *\\n     * @return address The treasury address.\\n     */\\n    function getTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the treasury fee.\\n     *\\n     * @return uint16 The treasury fee.\\n     */\\n    function getTreasuryFee() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the treasury address and treasury fee in a single call.\\n     *\\n     * @return tuple First, the treasury address, second, the treasury fee.\\n     */\\n    function getTreasuryData() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Gets the profile token URI contract.\\n     *\\n     * @return address The profile token URI contract.\\n     */\\n    function getProfileTokenURIContract() external view returns (address);\\n\\n    /**\\n     * @notice Gets the follow token URI contract.\\n     *\\n     * @return address The follow token URI contract.\\n     */\\n    function getFollowTokenURIContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4fb99da977c479cbd417768ad4c3ad052446e7a8fcba4f3621d5dc631d19acda\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {ILensProtocol} from '../interfaces/ILensProtocol.sol';\\nimport {ILensGovernable} from '../interfaces/ILensGovernable.sol';\\nimport {ILensHubEventHooks} from '../interfaces/ILensHubEventHooks.sol';\\nimport {ILensImplGetters} from '../interfaces/ILensImplGetters.sol';\\nimport {ILensProfiles} from '../interfaces/ILensProfiles.sol';\\nimport {ILensVersion} from '../interfaces/ILensVersion.sol';\\n\\ninterface ILensHub is\\n    ILensProfiles,\\n    ILensProtocol,\\n    ILensGovernable,\\n    ILensHubEventHooks,\\n    ILensImplGetters,\\n    ILensVersion\\n{}\\n\",\"keccak256\":\"0x42a786c73ee2e5c47695354ec4578894bb0c19583eec0ca90caf63088db3813c\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensHubEventHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensHubEventHooks\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract's event hooks. As we want most of the core events to be\\n * emitted by the LensHub contract, event hooks are needed for core events generated by pheripheral contracts.\\n */\\ninterface ILensHubEventHooks {\\n    /**\\n     * @dev Helper function to emit an `Unfollowed` event from the hub, to be consumed by indexers to track unfollows.\\n     * @custom:permissions FollowNFT of the Profile unfollowed.\\n     *\\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\\n     * @param transactionExecutor The address of the account executing the unfollow operation.\\n     */\\n    function emitUnfollowedEvent(\\n        uint256 unfollowerProfileId,\\n        uint256 idOfProfileUnfollowed,\\n        address transactionExecutor\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6681eee20562c880f152a420cc62eaf374647230611ad6c5d8efebbbc70cd35e\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensImplGetters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensImplGetters\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract's implementation getters. These implementations will be used\\n * for deploying each respective contract for each profile.\\n */\\ninterface ILensImplGetters {\\n    /**\\n     * @notice Returns the Follow NFT implementation address that is used for all deployed Follow NFTs.\\n     *\\n     * @return address The Follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the Collect NFT implementation address that is used for each new deployed Collect NFT.\\n     * @custom:pending-deprecation\\n     *\\n     * @return address The Collect NFT implementation address.\\n     */\\n    function getLegacyCollectNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the registry that stores all modules that are used by the Lens Protocol.\\n     *\\n     * @return address The address of the Module Registry contract.\\n     */\\n    function getModuleRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9048a5464879c9fdd90d54739e0e7ed997517b49d0ea06a5df4f6f19f0a185e1\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensProfiles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\\n\\ninterface ILensProfiles is ILensERC721 {\\n    /**\\n     * @notice DANGER: Triggers disabling the profile protection mechanism for the msg.sender, which will allow\\n     * transfers or approvals over profiles held by it.\\n     * Disabling the mechanism will have a timelock before it becomes effective, allowing the owner to re-enable\\n     * the protection back in case of being under attack.\\n     * The protection layer only applies to EOA wallets.\\n     */\\n    function DANGER__disableTokenGuardian() external;\\n\\n    /**\\n     * @notice Enables back the profile protection mechanism for the msg.sender, preventing profile transfers or\\n     * approvals (except when revoking them).\\n     * The protection layer only applies to EOA wallets.\\n     */\\n    function enableTokenGuardian() external;\\n\\n    /**\\n     * @notice Returns the timestamp at which the Token Guardian will become effectively disabled.\\n     *\\n     * @param wallet The address to check the timestamp for.\\n     *\\n     * @return uint256 The timestamp at which the Token Guardian will become effectively disabled. Zero if enabled.\\n     */\\n    function getTokenGuardianDisablingTimestamp(address wallet) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52c2f0267184de656ee02955587bad0b0b05675b400b06c9a661cb5e7aa547b4\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensProtocol\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for Lens Protocol's core functions. It contains all the entry points for performing\\n * social operations.\\n */\\ninterface ILensProtocol {\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a Profile NFT to the given recipient.\\n     * @custom:permissions Any whitelisted profile creator.\\n     *\\n     * @param createProfileParams A CreateProfileParams struct containing the needed params.\\n     */\\n    function createProfile(Types.CreateProfileParams calldata createProfileParams) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the metadata URI for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the metadata URI for.\\n     * @param metadataURI The metadata URI to set for the given profile.\\n     */\\n    function setProfileMetadataURI(uint256 profileId, string calldata metadataURI) external;\\n\\n    /**\\n     * @custom:meta-tx setProfileMetadataURI.\\n     */\\n    function setProfileMetadataURIWithSig(\\n        uint256 profileId,\\n        string calldata metadataURI,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the follow module for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(uint256 profileId, address followModule, bytes calldata followModuleInitData) external;\\n\\n    /**\\n     * @custom:meta-tx setFollowModule.\\n     */\\n    function setFollowModuleWithSig(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile. It allows setting the approvals for\\n     * delegated executors in the specified configuration, as well as switching to it.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     * @param configNumber The number of the configuration where the executor approval state is being set.\\n     * @param switchToGivenConfig A boolean indicating if the configuration must be switched to the one with the given\\n     * number.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile under the current configuration.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx changeDelegatedExecutorsConfig.\\n     */\\n    function changeDelegatedExecutorsConfigWithSig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post.\\n     * Post is the most basic publication type, and can be used to publish any kind of content.\\n     * Posts can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this post (e.g. token-gated comments)\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param postParams A PostParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(Types.PostParams calldata postParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx post.\\n     */\\n    function postWithSig(\\n        Types.PostParams calldata postParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment on the given publication.\\n     * Comment is a type of reference publication that points to another publication.\\n     * Comments can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this comment (e.g. token-gated mirrors)\\n     * Comments can have referrers (e.g. publications or profiles that helped to discover the pointed publication).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param commentParams A CommentParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(Types.CommentParams calldata commentParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx comment.\\n     */\\n    function commentWithSig(\\n        Types.CommentParams calldata commentParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror of the given publication.\\n     * Mirror is a type of reference publication that points to another publication but doesn't have content.\\n     * Mirrors don't have any modules initialized.\\n     * Mirrors can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * You cannot mirror a mirror, comment on a mirror, or quote a mirror.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param mirrorParams A MirrorParams struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(Types.MirrorParams calldata mirrorParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx mirror.\\n     */\\n    function mirrorWithSig(\\n        Types.MirrorParams calldata mirrorParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a quote of the given publication.\\n     * Quote is a type of reference publication similar to mirror, but it has content and modules.\\n     * Quotes can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this quote (e.g. token-gated comments on quote)\\n     * Quotes can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * Unlike mirrors, you can mirror a quote, comment on a quote, or quote a quote.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param quoteParams A QuoteParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the quote's publication ID.\\n     */\\n    function quote(Types.QuoteParams calldata quoteParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx quote.\\n     */\\n    function quoteWithSig(\\n        Types.QuoteParams calldata quoteParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Follows given profiles, executing each profile's follow module logic (if any).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToFollow`, `followTokenIds`, and `datas` arrays must be of the same length,\\n     * regardless if the profiles do not have a follow module set.\\n     *\\n     * @param followerProfileId The ID of the profile the follows are being executed for.\\n     * @param idsOfProfilesToFollow The array of IDs of profiles to follow.\\n     * @param followTokenIds The array of follow token IDs to use for each follow (0 if you don't own a follow token).\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of follow token IDs representing the follow tokens created for each follow.\\n     */\\n    function follow(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @custom:meta-tx follow.\\n     */\\n    function followWithSig(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Unfollows given profiles.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param unfollowerProfileId The ID of the profile the unfollows are being executed for.\\n     * @param idsOfProfilesToUnfollow The array of IDs of profiles to unfollow.\\n     */\\n    function unfollow(uint256 unfollowerProfileId, uint256[] calldata idsOfProfilesToUnfollow) external;\\n\\n    /**\\n     * @custom:meta-tx unfollow.\\n     */\\n    function unfollowWithSig(\\n        uint256 unfollowerProfileId,\\n        uint256[] calldata idsOfProfilesToUnfollow,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the block status for the given profiles. Changing a profile's block status to `true` (i.e. blocked),\\n     * when will also force them to unfollow.\\n     * Blocked profiles cannot perform any actions with the profile that blocked them: they cannot comment or mirror\\n     * their publications, they cannot follow them, they cannot collect, tip them, etc.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToSetBlockStatus` and `blockStatus` arrays must be of the same length.\\n     *\\n     * @param byProfileId The ID of the profile that is blocking/unblocking somebody.\\n     * @param idsOfProfilesToSetBlockStatus The array of IDs of profiles to set block status.\\n     * @param blockStatus The array of block statuses to use for each (true is blocked).\\n     */\\n    function setBlockStatus(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx setBlockStatus.\\n     */\\n    function setBlockStatusWithSig(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     * Collect can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Collector Profile Owner or its Delegated Executor.\\n     * @custom:pending-deprecation Collect modules were replaced by PublicationAction Collect modules in V2. This method\\n     * is left here for backwards compatibility with posts made in V1 that had Collect modules.\\n     *\\n     * @param collectParams A CollectParams struct containing the parameters.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectLegacy(Types.LegacyCollectParams calldata collectParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx collect.\\n     * @custom:pending-deprecation\\n     */\\n    function collectLegacyWithSig(\\n        Types.LegacyCollectParams calldata collectParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Acts on a given publication with the specified parameters.\\n     * You can act on a publication except a mirror (if it has at least one action module initialized).\\n     * Actions can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Actor Profile Owner or its Delegated Executor.\\n     *\\n     * @param publicationActionParams A PublicationActionParams struct containing the parameters.\\n     *\\n     * @return bytes Arbitrary data the action module returns.\\n     */\\n    function act(Types.PublicationActionParams calldata publicationActionParams) external returns (bytes memory);\\n\\n    /**\\n     * @custom:meta-tx act.\\n     */\\n    function actWithSig(\\n        Types.PublicationActionParams calldata publicationActionParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @dev This function is used to invalidate signatures by incrementing the nonce of the signer.\\n     * @param increment The amount to increment the nonce by (max 255).\\n     */\\n    function incrementNonce(uint8 increment) external;\\n\\n    /////////////////////////////////\\n    ///       VIEW FUNCTIONS      ///\\n    /////////////////////////////////\\n\\n    /**\\n     * @notice Returns whether or not `followerProfileId` is following `followedProfileId`.\\n     *\\n     * @param followerProfileId The ID of the profile whose following state should be queried.\\n     * @param followedProfileId The ID of the profile whose followed state should be queried.\\n     *\\n     * @return bool True if `followerProfileId` is following `followedProfileId`, false otherwise.\\n     */\\n    function isFollowing(uint256 followerProfileId, uint256 followedProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the configuration with the given\\n     * number, to act on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     * @param configNumber The number of the configuration where the executor approval state is being queried.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * given configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor,\\n        uint64 configNumber\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the current configuration, to act\\n     * on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * current configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors config number is being queried\\n     *\\n     * @return uint256 The current delegated executor configuration number.\\n     */\\n    function getDelegatedExecutorsConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the previous used delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' previous configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor configuration number previously set. It will coincide with the current\\n     * configuration set if it was never switched from the default one.\\n     */\\n    function getDelegatedExecutorsPrevConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the maximum delegated executor config number for the given profile.\\n     * This is the maximum config number that was ever used by this profile.\\n     * When creating a new clean configuration, you can only use a number that is maxConfigNumber + 1.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' maximum configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor maximum configuration number set.\\n     */\\n    function getDelegatedExecutorsMaxConfigNumberSet(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns whether `profileId` is blocked by `byProfileId`.\\n     * See setBlockStatus() for more information on how blocking works on the platform.\\n     *\\n     * @param profileId The ID of the profile whose blocked status should be queried.\\n     * @param byProfileId The ID of the profile whose blocker status should be queried.\\n     *\\n     * @return bool True if `profileId` is blocked by `byProfileId`, false otherwise.\\n     */\\n    function isBlocked(uint256 profileId, uint256 byProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     * This is used to store the publication's metadata, e.g.: content, images, etc.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return Profile The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId) external view returns (Types.Profile memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return Publication The publication struct associated with the queried publication.\\n     */\\n    function getPublication(uint256 profileId, uint256 pubId) external view returns (Types.PublicationMemory memory);\\n\\n    /**\\n     * @notice Returns the type of a given publication.\\n     * The type can be one of the following (see PublicationType enum):\\n     * - Nonexistent\\n     * - Post\\n     * - Comment\\n     * - Mirror\\n     * - Quote\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationType The publication type of the queried publication.\\n     */\\n    function getPublicationType(uint256 profileId, uint256 pubId) external view returns (Types.PublicationType);\\n\\n    /**\\n     * @notice Returns wether a given Action Module is enabled for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     * @param module The address of the Action Module to query.\\n     *\\n     * @return bool True if the Action Module is enabled for the queried publication, false if not.\\n     */\\n    function isActionModuleEnabledInPublication(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address module\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1960db7eb00db58fa1ece3aa4a668dd60285c04cba4d4e1937f1fe25980d480c\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ILensVersion\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub Version getters and emitter.\\n * It allows to emit a LensHub version during an upgrade, and also to get the current version.\\n */\\ninterface ILensVersion {\\n    /**\\n     * @notice Returns the LensHub current Version.\\n     *\\n     * @return version The LensHub current Version.\\n     */\\n    function getVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the LensHub current Git Commit.\\n     *\\n     * @return gitCommit The LensHub current Git Commit.\\n     */\\n    function getGitCommit() external view returns (bytes20);\\n\\n    /**\\n     * @notice Emits the LensHub current Version. Used in upgradeAndCall().\\n     */\\n    function emitVersion() external;\\n}\\n\",\"keccak256\":\"0x080d3c3631ce80c794b7649664b4f6ec90620079cee7d382bf8184d7280d15a0\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/MetaTxLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport {IERC1271} from '@openzeppelin/contracts/interfaces/IERC1271.sol';\\nimport {ILensERC721} from '../interfaces/ILensERC721.sol';\\nimport {Types} from '../libraries/constants/Types.sol';\\nimport {Errors} from '../libraries/constants/Errors.sol';\\nimport {Typehash} from '../libraries/constants/Typehash.sol';\\nimport {StorageLib} from '../libraries/StorageLib.sol';\\nimport {Events} from '../libraries/constants/Events.sol';\\n\\n/**\\n * @title MetaTxLib\\n * @author Lens Protocol\\n *\\n * NOTE: the functions in this contract operate under the assumption that the passed signer is already validated\\n * to either be the originator or one of their delegated executors.\\n *\\n * @dev User nonces are incremented from this library as well.\\n */\\nlibrary MetaTxLib {\\n    string constant EIP712_DOMAIN_VERSION = '2';\\n    bytes32 constant EIP712_DOMAIN_VERSION_HASH = keccak256(bytes(EIP712_DOMAIN_VERSION));\\n    bytes4 constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n\\n    /**\\n     * @dev We store the domain separator and LensHub Proxy address as constants to save gas.\\n     *\\n     * keccak256(\\n     *     abi.encode(\\n     *         keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n     *         keccak256('Lens Protocol Profiles'), // Contract Name\\n     *         keccak256('2'), // Version Hash\\n     *         137, // Polygon Chain ID\\n     *         address(0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d) // Verifying Contract Address - LensHub Address\\n     *     )\\n     * );\\n     */\\n    bytes32 constant LENS_HUB_CACHED_POLYGON_DOMAIN_SEPARATOR =\\n        0xbf9544cf7d7a0338fc4f071be35409a61e51e9caef559305410ad74e16a05f2d;\\n\\n    address constant LENS_HUB_ADDRESS = 0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d;\\n\\n    uint256 constant POLYGON_CHAIN_ID = 137;\\n\\n    function validateSetProfileMetadataURISignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 profileId,\\n        string calldata metadataURI\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.SET_PROFILE_METADATA_URI,\\n                        profileId,\\n                        _encodeUsingEip712Rules(metadataURI),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateSetFollowModuleSignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.SET_FOLLOW_MODULE,\\n                        profileId,\\n                        followModule,\\n                        _encodeUsingEip712Rules(followModuleInitData),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateChangeDelegatedExecutorsConfigSignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig\\n    ) external {\\n        address signer = signature.signer;\\n        uint256 deadline = signature.deadline;\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.CHANGE_DELEGATED_EXECUTORS_CONFIG,\\n                        delegatorProfileId,\\n                        _encodeUsingEip712Rules(delegatedExecutors),\\n                        _encodeUsingEip712Rules(approvals),\\n                        configNumber,\\n                        switchToGivenConfig,\\n                        _getNonceIncrementAndEmitEvent(signer),\\n                        deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validatePostSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.PostParams calldata postParams\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.POST,\\n                        postParams.profileId,\\n                        _encodeUsingEip712Rules(postParams.contentURI),\\n                        _encodeUsingEip712Rules(postParams.actionModules),\\n                        _encodeUsingEip712Rules(postParams.actionModulesInitDatas),\\n                        postParams.referenceModule,\\n                        _encodeUsingEip712Rules(postParams.referenceModuleInitData),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateCommentSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.CommentParams calldata commentParams\\n    ) external {\\n        bytes memory encodedAbi = abi.encode(\\n            Typehash.COMMENT,\\n            commentParams.profileId,\\n            _encodeUsingEip712Rules(commentParams.contentURI),\\n            commentParams.pointedProfileId,\\n            commentParams.pointedPubId,\\n            _encodeUsingEip712Rules(commentParams.referrerProfileIds),\\n            _encodeUsingEip712Rules(commentParams.referrerPubIds),\\n            _encodeUsingEip712Rules(commentParams.referenceModuleData),\\n            _encodeUsingEip712Rules(commentParams.actionModules),\\n            _encodeUsingEip712Rules(commentParams.actionModulesInitDatas),\\n            commentParams.referenceModule,\\n            _encodeUsingEip712Rules(commentParams.referenceModuleInitData),\\n            _getNonceIncrementAndEmitEvent(signature.signer),\\n            signature.deadline\\n        );\\n        _validateRecoveredAddress(_calculateDigest(keccak256(encodedAbi)), signature);\\n    }\\n\\n    function validateQuoteSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.QuoteParams calldata quoteParams\\n    ) external {\\n        bytes memory encodedAbi = abi.encode(\\n            Typehash.QUOTE,\\n            quoteParams.profileId,\\n            _encodeUsingEip712Rules(quoteParams.contentURI),\\n            quoteParams.pointedProfileId,\\n            quoteParams.pointedPubId,\\n            _encodeUsingEip712Rules(quoteParams.referrerProfileIds),\\n            _encodeUsingEip712Rules(quoteParams.referrerPubIds),\\n            _encodeUsingEip712Rules(quoteParams.referenceModuleData),\\n            _encodeUsingEip712Rules(quoteParams.actionModules),\\n            _encodeUsingEip712Rules(quoteParams.actionModulesInitDatas),\\n            quoteParams.referenceModule,\\n            _encodeUsingEip712Rules(quoteParams.referenceModuleInitData),\\n            _getNonceIncrementAndEmitEvent(signature.signer),\\n            signature.deadline\\n        );\\n        _validateRecoveredAddress(_calculateDigest(keccak256(encodedAbi)), signature);\\n    }\\n\\n    function validateMirrorSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.MirrorParams calldata mirrorParams\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.MIRROR,\\n                        mirrorParams.profileId,\\n                        _encodeUsingEip712Rules(mirrorParams.metadataURI),\\n                        mirrorParams.pointedProfileId,\\n                        mirrorParams.pointedPubId,\\n                        _encodeUsingEip712Rules(mirrorParams.referrerProfileIds),\\n                        _encodeUsingEip712Rules(mirrorParams.referrerPubIds),\\n                        _encodeUsingEip712Rules(mirrorParams.referenceModuleData),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateFollowSignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.FOLLOW,\\n                        followerProfileId,\\n                        _encodeUsingEip712Rules(idsOfProfilesToFollow),\\n                        _encodeUsingEip712Rules(followTokenIds),\\n                        _encodeUsingEip712Rules(datas),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateUnfollowSignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 unfollowerProfileId,\\n        uint256[] calldata idsOfProfilesToUnfollow\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.UNFOLLOW,\\n                        unfollowerProfileId,\\n                        _encodeUsingEip712Rules(idsOfProfilesToUnfollow),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateSetBlockStatusSignature(\\n        Types.EIP712Signature calldata signature,\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.SET_BLOCK_STATUS,\\n                        byProfileId,\\n                        _encodeUsingEip712Rules(idsOfProfilesToSetBlockStatus),\\n                        _encodeUsingEip712Rules(blockStatus),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateLegacyCollectSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.LegacyCollectParams calldata collectParams\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.COLLECT_LEGACY,\\n                        collectParams.publicationCollectedProfileId,\\n                        collectParams.publicationCollectedId,\\n                        collectParams.collectorProfileId,\\n                        collectParams.referrerProfileId,\\n                        collectParams.referrerPubId,\\n                        _encodeUsingEip712Rules(collectParams.collectModuleData),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    function validateActSignature(\\n        Types.EIP712Signature calldata signature,\\n        Types.PublicationActionParams calldata publicationActionParams\\n    ) external {\\n        _validateRecoveredAddress(\\n            _calculateDigest(\\n                keccak256(\\n                    abi.encode(\\n                        Typehash.ACT,\\n                        publicationActionParams.publicationActedProfileId,\\n                        publicationActionParams.publicationActedId,\\n                        publicationActionParams.actorProfileId,\\n                        _encodeUsingEip712Rules(publicationActionParams.referrerProfileIds),\\n                        _encodeUsingEip712Rules(publicationActionParams.referrerPubIds),\\n                        publicationActionParams.actionModuleAddress,\\n                        _encodeUsingEip712Rules(publicationActionParams.actionModuleData),\\n                        _getNonceIncrementAndEmitEvent(signature.signer),\\n                        signature.deadline\\n                    )\\n                )\\n            ),\\n            signature\\n        );\\n    }\\n\\n    /// @dev This function is used to invalidate signatures by incrementing the nonce\\n    function incrementNonce(uint8 increment) external {\\n        uint256 currentNonce = StorageLib.nonces()[msg.sender];\\n        StorageLib.nonces()[msg.sender] = currentNonce + increment;\\n        emit Events.NonceUpdated(msg.sender, currentNonce + increment, block.timestamp);\\n    }\\n\\n    function calculateDomainSeparator() internal view returns (bytes32) {\\n        if (address(this) == LENS_HUB_ADDRESS && block.chainid == POLYGON_CHAIN_ID) {\\n            return LENS_HUB_CACHED_POLYGON_DOMAIN_SEPARATOR;\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    Typehash.EIP712_DOMAIN,\\n                    keccak256(bytes(ILensERC721(address(this)).name())),\\n                    EIP712_DOMAIN_VERSION_HASH,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Wrapper for ecrecover to reduce code size, used in meta-tx specific functions.\\n     */\\n    function _validateRecoveredAddress(bytes32 digest, Types.EIP712Signature calldata signature) private view {\\n        if (block.timestamp > signature.deadline) revert Errors.SignatureExpired();\\n        // If the expected address is a contract, check the signature there.\\n        if (signature.signer.code.length != 0) {\\n            bytes memory concatenatedSig = abi.encodePacked(signature.r, signature.s, signature.v);\\n            if (IERC1271(signature.signer).isValidSignature(digest, concatenatedSig) != EIP1271_MAGIC_VALUE) {\\n                revert Errors.SignatureInvalid();\\n            }\\n        } else {\\n            address recoveredAddress = ecrecover(digest, signature.v, signature.r, signature.s);\\n            if (recoveredAddress == address(0) || recoveredAddress != signature.signer) {\\n                revert Errors.SignatureInvalid();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 digest based on the current DOMAIN_SEPARATOR.\\n     *\\n     * @param hashedMessage The message hash from which the digest should be calculated.\\n     *\\n     * @return bytes32 A 32-byte output representing the EIP712 digest.\\n     */\\n    function _calculateDigest(bytes32 hashedMessage) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked('\\\\x19\\\\x01', calculateDomainSeparator(), hashedMessage));\\n    }\\n\\n    /**\\n     * @dev This fetches a signer's current nonce and increments it so it's ready for the next meta-tx. Also emits\\n     * the `NonceUpdated` event.\\n     *\\n     * @param signer The address to get and increment the nonce for.\\n     *\\n     * @return uint256 The current nonce for the given signer prior to being incremented.\\n     */\\n    function _getNonceIncrementAndEmitEvent(address signer) private returns (uint256) {\\n        uint256 currentNonce;\\n        unchecked {\\n            currentNonce = StorageLib.nonces()[signer]++;\\n        }\\n        emit Events.NonceUpdated(signer, currentNonce + 1, block.timestamp);\\n        return currentNonce;\\n    }\\n\\n    function _encodeUsingEip712Rules(bytes[] memory bytesArray) private pure returns (bytes32) {\\n        bytes32[] memory bytesArrayEncodedElements = new bytes32[](bytesArray.length);\\n        uint256 i;\\n        while (i < bytesArray.length) {\\n            // A `bytes` type is encoded as its keccak256 hash.\\n            bytesArrayEncodedElements[i] = _encodeUsingEip712Rules(bytesArray[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // An array is encoded as the keccak256 hash of the concatenation of their encoded elements.\\n        return _encodeUsingEip712Rules(bytesArrayEncodedElements);\\n    }\\n\\n    function _encodeUsingEip712Rules(bool[] memory boolArray) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(boolArray));\\n    }\\n\\n    function _encodeUsingEip712Rules(address[] memory addressArray) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(addressArray));\\n    }\\n\\n    function _encodeUsingEip712Rules(uint256[] memory uint256Array) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(uint256Array));\\n    }\\n\\n    function _encodeUsingEip712Rules(bytes32[] memory bytes32Array) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(bytes32Array));\\n    }\\n\\n    function _encodeUsingEip712Rules(string memory stringValue) private pure returns (bytes32) {\\n        return keccak256(bytes(stringValue));\\n    }\\n\\n    function _encodeUsingEip712Rules(bytes memory bytesValue) private pure returns (bytes32) {\\n        return keccak256(bytesValue);\\n    }\\n}\\n\",\"keccak256\":\"0x9a5c999a943889ca3c9d65e5b4d34387c2d8f8be41cec64a072038e9f4347f3f\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/StorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\nlibrary StorageLib {\\n    // uint256 constant NAME_SLOT = 0;\\n    // uint256 constant SYMBOL_SLOT = 1;\\n    uint256 constant TOKEN_DATA_MAPPING_SLOT = 2;\\n    // uint256 constant BALANCES_SLOT = 3;\\n    // uint256 constant TOKEN_APPROVAL_MAPPING_SLOT = 4;\\n    // uint256 constant OPERATOR_APPROVAL_MAPPING_SLOT = 5;\\n    // Slot 6 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `ownedTokens`.\\n    // Slot 7 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `ownedTokensIndex`.\\n    // uint256 constant TOTAL_SUPPLY_SLOT = 8;\\n    // Slot 9 is deprecated in Lens V2. In V1 it was used for ERC-721 Enumerable's `allTokensIndex`.\\n    uint256 constant SIG_NONCES_MAPPING_SLOT = 10;\\n    uint256 constant LAST_INITIALIZED_REVISION_SLOT = 11; // VersionedInitializable's `lastInitializedRevision` field.\\n    uint256 constant PROTOCOL_STATE_SLOT = 12;\\n    uint256 constant PROFILE_CREATOR_WHITELIST_MAPPING_SLOT = 13;\\n    // Slot 14 is deprecated in Lens V2. In V1 it was used for the follow module address whitelist.\\n    // Slot 15 is deprecated in Lens V2. In V1 it was used for the collect module address whitelist.\\n    // Slot 16 is deprecated in Lens V2. In V1 it was used for the reference module address whitelist.\\n    // Slot 17 is deprecated in Lens V2. In V1 it was used for the dispatcher address by profile ID.\\n    uint256 constant PROFILE_ID_BY_HANDLE_HASH_MAPPING_SLOT = 18; // Deprecated slot, but still needed for V2 migration.\\n    uint256 constant PROFILES_MAPPING_SLOT = 19;\\n    uint256 constant PUBLICATIONS_MAPPING_SLOT = 20;\\n    // Slot 21 is deprecated in Lens V2. In V1 it was used for the default profile ID by address.\\n    uint256 constant PROFILE_COUNTER_SLOT = 22;\\n    uint256 constant GOVERNANCE_SLOT = 23;\\n    uint256 constant EMERGENCY_ADMIN_SLOT = 24;\\n    //////////////////////////////////\\n    ///  Introduced in Lens V1.3:  ///\\n    //////////////////////////////////\\n    uint256 constant TOKEN_GUARDIAN_DISABLING_TIMESTAMP_MAPPING_SLOT = 25;\\n    //////////////////////////////////\\n    ///   Introduced in Lens V2:   ///\\n    //////////////////////////////////\\n    uint256 constant DELEGATED_EXECUTOR_CONFIG_MAPPING_SLOT = 26;\\n    uint256 constant BLOCKED_STATUS_MAPPING_SLOT = 27;\\n    uint256 constant PROFILE_ROYALTIES_BPS_SLOT = 28;\\n    uint256 constant MIGRATION_ADMINS_WHITELISTED_MAPPING_SLOT = 29;\\n    uint256 constant TREASURY_DATA_SLOT = 30;\\n    uint256 constant PROFILE_TOKEN_URI_CONTRACT_SLOT = 31;\\n    uint256 constant FOLLOW_TOKEN_URI_CONTRACT_SLOT = 32;\\n    uint256 constant LEGACY_COLLECT_FOLLOW_VALIDATION_HELPER_MAPPING_SLOT = 33;\\n\\n    function getPublication(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) internal pure returns (Types.Publication storage _publication) {\\n        assembly {\\n            mstore(0, profileId)\\n            mstore(32, PUBLICATIONS_MAPPING_SLOT)\\n            mstore(32, keccak256(0, 64))\\n            mstore(0, pubId)\\n            _publication.slot := keccak256(0, 64)\\n        }\\n    }\\n\\n    function getPublicationMemory(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) internal pure returns (Types.PublicationMemory memory) {\\n        Types.PublicationMemory storage _publicationStorage;\\n        assembly {\\n            mstore(0, profileId)\\n            mstore(32, PUBLICATIONS_MAPPING_SLOT)\\n            mstore(32, keccak256(0, 64))\\n            mstore(0, pubId)\\n            _publicationStorage.slot := keccak256(0, 64)\\n        }\\n\\n        Types.PublicationMemory memory _publicationMemory;\\n        _publicationMemory = _publicationStorage;\\n\\n        return _publicationMemory;\\n    }\\n\\n    function getProfile(uint256 profileId) internal pure returns (Types.Profile storage _profiles) {\\n        assembly {\\n            mstore(0, profileId)\\n            mstore(32, PROFILES_MAPPING_SLOT)\\n            _profiles.slot := keccak256(0, 64)\\n        }\\n    }\\n\\n    function getDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId\\n    ) internal pure returns (Types.DelegatedExecutorsConfig storage _delegatedExecutorsConfig) {\\n        assembly {\\n            mstore(0, delegatorProfileId)\\n            mstore(32, DELEGATED_EXECUTOR_CONFIG_MAPPING_SLOT)\\n            _delegatedExecutorsConfig.slot := keccak256(0, 64)\\n        }\\n    }\\n\\n    function tokenGuardianDisablingTimestamp()\\n        internal\\n        pure\\n        returns (mapping(address => uint256) storage _tokenGuardianDisablingTimestamp)\\n    {\\n        assembly {\\n            _tokenGuardianDisablingTimestamp.slot := TOKEN_GUARDIAN_DISABLING_TIMESTAMP_MAPPING_SLOT\\n        }\\n    }\\n\\n    function getTokenData(uint256 tokenId) internal pure returns (Types.TokenData storage _tokenData) {\\n        assembly {\\n            mstore(0, tokenId)\\n            mstore(32, TOKEN_DATA_MAPPING_SLOT)\\n            _tokenData.slot := keccak256(0, 64)\\n        }\\n    }\\n\\n    function blockedStatus(\\n        uint256 blockerProfileId\\n    ) internal pure returns (mapping(uint256 => bool) storage _blockedStatus) {\\n        assembly {\\n            mstore(0, blockerProfileId)\\n            mstore(32, BLOCKED_STATUS_MAPPING_SLOT)\\n            _blockedStatus.slot := keccak256(0, 64)\\n        }\\n    }\\n\\n    function nonces() internal pure returns (mapping(address => uint256) storage _nonces) {\\n        assembly {\\n            _nonces.slot := SIG_NONCES_MAPPING_SLOT\\n        }\\n    }\\n\\n    function profileIdByHandleHash()\\n        internal\\n        pure\\n        returns (mapping(bytes32 => uint256) storage _profileIdByHandleHash)\\n    {\\n        assembly {\\n            _profileIdByHandleHash.slot := PROFILE_ID_BY_HANDLE_HASH_MAPPING_SLOT\\n        }\\n    }\\n\\n    function profileCreatorWhitelisted()\\n        internal\\n        pure\\n        returns (mapping(address => bool) storage _profileCreatorWhitelisted)\\n    {\\n        assembly {\\n            _profileCreatorWhitelisted.slot := PROFILE_CREATOR_WHITELIST_MAPPING_SLOT\\n        }\\n    }\\n\\n    function migrationAdminWhitelisted()\\n        internal\\n        pure\\n        returns (mapping(address => bool) storage _migrationAdminWhitelisted)\\n    {\\n        assembly {\\n            _migrationAdminWhitelisted.slot := MIGRATION_ADMINS_WHITELISTED_MAPPING_SLOT\\n        }\\n    }\\n\\n    function legacyCollectFollowValidationHelper()\\n        internal\\n        pure\\n        returns (mapping(address => uint256) storage _legacyCollectFollowValidationHelper)\\n    {\\n        assembly {\\n            _legacyCollectFollowValidationHelper.slot := LEGACY_COLLECT_FOLLOW_VALIDATION_HELPER_MAPPING_SLOT\\n        }\\n    }\\n\\n    function getGovernance() internal view returns (address _governance) {\\n        assembly {\\n            _governance := sload(GOVERNANCE_SLOT)\\n        }\\n    }\\n\\n    function setGovernance(address newGovernance) internal {\\n        assembly {\\n            sstore(GOVERNANCE_SLOT, newGovernance)\\n        }\\n    }\\n\\n    function getEmergencyAdmin() internal view returns (address _emergencyAdmin) {\\n        assembly {\\n            _emergencyAdmin := sload(EMERGENCY_ADMIN_SLOT)\\n        }\\n    }\\n\\n    function setEmergencyAdmin(address newEmergencyAdmin) internal {\\n        assembly {\\n            sstore(EMERGENCY_ADMIN_SLOT, newEmergencyAdmin)\\n        }\\n    }\\n\\n    function getState() internal view returns (Types.ProtocolState _state) {\\n        assembly {\\n            _state := sload(PROTOCOL_STATE_SLOT)\\n        }\\n    }\\n\\n    function setState(Types.ProtocolState newState) internal {\\n        assembly {\\n            sstore(PROTOCOL_STATE_SLOT, newState)\\n        }\\n    }\\n\\n    function getLastInitializedRevision() internal view returns (uint256 _lastInitializedRevision) {\\n        assembly {\\n            _lastInitializedRevision := sload(LAST_INITIALIZED_REVISION_SLOT)\\n        }\\n    }\\n\\n    function setLastInitializedRevision(uint256 newLastInitializedRevision) internal {\\n        assembly {\\n            sstore(LAST_INITIALIZED_REVISION_SLOT, newLastInitializedRevision)\\n        }\\n    }\\n\\n    function getTreasuryData() internal pure returns (Types.TreasuryData storage _treasuryData) {\\n        assembly {\\n            _treasuryData.slot := TREASURY_DATA_SLOT\\n        }\\n    }\\n\\n    function setProfileTokenURIContract(address profileTokenURIContract) internal {\\n        assembly {\\n            sstore(PROFILE_TOKEN_URI_CONTRACT_SLOT, profileTokenURIContract)\\n        }\\n    }\\n\\n    function setFollowTokenURIContract(address followTokenURIContract) internal {\\n        assembly {\\n            sstore(FOLLOW_TOKEN_URI_CONTRACT_SLOT, followTokenURIContract)\\n        }\\n    }\\n\\n    function getProfileTokenURIContract() internal view returns (address _profileTokenURIContract) {\\n        assembly {\\n            _profileTokenURIContract := sload(PROFILE_TOKEN_URI_CONTRACT_SLOT)\\n        }\\n    }\\n\\n    function getFollowTokenURIContract() internal view returns (address _followTokenURIContract) {\\n        assembly {\\n            _followTokenURIContract := sload(FOLLOW_TOKEN_URI_CONTRACT_SLOT)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf11a43167e779f3316f6374dc89ae3db7ccc3342b546aa1a319d6439303f6f09\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Errors {\\n    error CannotInitImplementation();\\n    error Initialized();\\n    error SignatureExpired();\\n    error SignatureInvalid();\\n    error InvalidOwner();\\n    error NotOwnerOrApproved();\\n    error NotHub();\\n    error TokenDoesNotExist();\\n    error NotGovernance();\\n    error NotGovernanceOrEmergencyAdmin();\\n    error EmergencyAdminCanOnlyPauseFurther();\\n    error NotProfileOwner();\\n    error PublicationDoesNotExist();\\n    error CallerNotFollowNFT();\\n    error CallerNotCollectNFT(); // Legacy\\n    error ArrayMismatch();\\n    error NotWhitelisted();\\n    error NotRegistered();\\n    error InvalidParameter();\\n    error ExecutorInvalid();\\n    error Blocked();\\n    error SelfBlock();\\n    error NotFollowing();\\n    error SelfFollow();\\n    error InvalidReferrer();\\n    error InvalidPointedPub();\\n    error NonERC721ReceiverImplementer();\\n    error AlreadyEnabled();\\n\\n    // Module Errors\\n    error InitParamsInvalid();\\n    error ActionNotAllowed();\\n\\n    error CollectNotAllowed(); // Used in LegacyCollectLib (pending deprecation)\\n\\n    // MultiState Errors\\n    error Paused();\\n    error PublishingPaused();\\n\\n    // Profile Guardian Errors\\n    error GuardianEnabled();\\n    error NotEOA();\\n    error DisablingAlreadyTriggered();\\n\\n    // Migration Errors\\n    error NotMigrationAdmin();\\n}\\n\",\"keccak256\":\"0x3bce382447150a8b2c7213bea5f4dd2cf210b315d45e1d0984c96bf8d610d175\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from './Types.sol';\\n\\nlibrary Events {\\n    /**\\n     * @dev Emitted when the NFT contract's name and symbol are set at initialization.\\n     *\\n     * @param name The NFT name set.\\n     * @param symbol The NFT symbol set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event BaseInitialized(string name, string symbol, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when the hub state is set.\\n     *\\n     * @param caller The caller who set the state.\\n     * @param prevState The previous protocol state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param newState The newly set state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event StateSet(\\n        address indexed caller,\\n        Types.ProtocolState indexed prevState,\\n        Types.ProtocolState indexed newState,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the governance address is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the governance address.\\n     * @param prevGovernance The previous governance address.\\n     * @param newGovernance The new governance address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event GovernanceSet(\\n        address indexed caller,\\n        address indexed prevGovernance,\\n        address indexed newGovernance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the emergency admin is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the emergency admin address.\\n     * @param oldEmergencyAdmin The previous emergency admin address.\\n     * @param newEmergencyAdmin The new emergency admin address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event EmergencyAdminSet(\\n        address indexed caller,\\n        address indexed oldEmergencyAdmin,\\n        address indexed newEmergencyAdmin,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile creator is added to or removed from the whitelist.\\n     *\\n     * @param profileCreator The address of the profile creator.\\n     * @param whitelisted Whether or not the profile creator is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreatorWhitelisted(address indexed profileCreator, bool indexed whitelisted, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a profile is created.\\n     *\\n     * @param profileId The newly created profile's token ID.\\n     * @param creator The profile creator, who created the token with the given profile ID.\\n     * @param to The address receiving the profile with the given profile ID.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreated(uint256 indexed profileId, address indexed creator, address indexed to, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a delegated executors configuration is changed.\\n     *\\n     * @param delegatorProfileId The ID of the profile for which the delegated executor was changed.\\n     * @param configNumber The number of the configuration where the executor approval state was set.\\n     * @param delegatedExecutors The array of delegated executors whose approval was set for.\\n     * @param approvals The array of booleans indicating the corresponding executor new approval status.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DelegatedExecutorsConfigChanged(\\n        uint256 indexed delegatorProfileId,\\n        uint256 indexed configNumber,\\n        address[] delegatedExecutors,\\n        bool[] approvals,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegated executors configuration is applied.\\n     *\\n     * @param delegatorProfileId The ID of the profile applying the configuration.\\n     * @param configNumber The number of the configuration applied.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DelegatedExecutorsConfigApplied(\\n        uint256 indexed delegatorProfileId,\\n        uint256 indexed configNumber,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile's follow module is set.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\\n     * @param followModuleInitData The data passed to the follow module, if any.\\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is ABI-encoded\\n     * and depends on the follow module chosen.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowModuleSet(\\n        uint256 indexed profileId,\\n        address followModule,\\n        bytes followModuleInitData,\\n        bytes followModuleReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a post is successfully published.\\n     *\\n     * @param postParams The parameters passed to create the post publication.\\n     * @param pubId The publication ID assigned to the created post.\\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\\n     * publication. This is ABI-encoded and depends on the action module chosen.\\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\\n     * ABI-encoded and depends on the reference module chosen.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event PostCreated(\\n        Types.PostParams postParams,\\n        uint256 indexed pubId,\\n        bytes[] actionModulesInitReturnDatas,\\n        bytes referenceModuleInitReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a comment is successfully published.\\n     *\\n     * @param commentParams The parameters passed to create the comment publication.\\n     * @param pubId The publication ID assigned to the created comment.\\n     * @param referenceModuleReturnData The data returned by the commented publication reference module's\\n     * processComment function, if the commented publication has a reference module set.\\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\\n     * publication. This is ABI-encoded and depends on the action module chosen.\\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\\n     * ABI-encoded and depends on the reference module chosen.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CommentCreated(\\n        Types.CommentParams commentParams,\\n        uint256 indexed pubId,\\n        bytes referenceModuleReturnData,\\n        bytes[] actionModulesInitReturnDatas,\\n        bytes referenceModuleInitReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a mirror is successfully published.\\n     *\\n     * @param mirrorParams The parameters passed to create the mirror publication.\\n     * @param pubId The publication ID assigned to the created mirror.\\n     * @param referenceModuleReturnData The data returned by the mirrored publication reference module's\\n     * processMirror function, if the mirrored publication has a reference module set.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event MirrorCreated(\\n        Types.MirrorParams mirrorParams,\\n        uint256 indexed pubId,\\n        bytes referenceModuleReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a quote is successfully published.\\n     *\\n     * @param quoteParams The parameters passed to create the quote publication.\\n     * @param pubId The publication ID assigned to the created quote.\\n     * @param referenceModuleReturnData The data returned by the quoted publication reference module's\\n     * processQuote function, if the quoted publication has a reference module set.\\n     * @param actionModulesInitReturnDatas The data returned from the action modules' initialization for this given\\n     * publication. This is ABI-encoded and depends on the action module chosen.\\n     * @param referenceModuleInitReturnData The data returned from the reference module at initialization. This is\\n     * ABI-encoded and depends on the reference module chosen.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event QuoteCreated(\\n        Types.QuoteParams quoteParams,\\n        uint256 indexed pubId,\\n        bytes referenceModuleReturnData,\\n        bytes[] actionModulesInitReturnDatas,\\n        bytes referenceModuleInitReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a followNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The token ID of the profile to which this followNFT is associated.\\n     * @param followNFT The address of the newly deployed followNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTDeployed(uint256 indexed profileId, address indexed followNFT, uint256 timestamp);\\n    /**\\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The publisher's profile token ID.\\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\\n     * @param collectNFT The address of the newly deployed collectNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event LegacyCollectNFTDeployed(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        address indexed collectNFT,\\n        uint256 timestamp\\n    );\\n    /**\\n     * @dev Emitted upon a successful action.\\n     *\\n     * @param publicationActionParams The parameters passed to act on a publication.\\n     * @param actionModuleReturnData The data returned from the action modules. This is ABI-encoded and the format\\n     * depends on the action module chosen.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Acted(\\n        Types.PublicationActionParams publicationActionParams,\\n        bytes actionModuleReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful follow operation.\\n     *\\n     * @param followerProfileId The ID of the profile that executed the follow.\\n     * @param idOfProfileFollowed The ID of the profile that was followed.\\n     * @param followTokenIdAssigned The ID of the follow token assigned to the follower.\\n     * @param followModuleData The data to pass to the follow module, if any.\\n     * @param processFollowModuleReturnData The data returned by the followed profile follow module's processFollow\\n     * function, if the followed profile has a reference module set.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The timestamp of the follow operation.\\n     */\\n    event Followed(\\n        uint256 indexed followerProfileId,\\n        uint256 idOfProfileFollowed,\\n        uint256 followTokenIdAssigned,\\n        bytes followModuleData,\\n        bytes processFollowModuleReturnData,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful unfollow operation.\\n     *\\n     * @param unfollowerProfileId The ID of the profile that executed the unfollow.\\n     * @param idOfProfileUnfollowed The ID of the profile that was unfollowed.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The timestamp of the unfollow operation.\\n     */\\n    event Unfollowed(\\n        uint256 indexed unfollowerProfileId,\\n        uint256 idOfProfileUnfollowed,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful block, through a block status setting operation.\\n     *\\n     * @param byProfileId The ID of the profile that executed the block status change.\\n     * @param idOfProfileBlocked The ID of the profile whose block status have been set to blocked.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The timestamp of the block operation.\\n     */\\n    event Blocked(\\n        uint256 indexed byProfileId,\\n        uint256 idOfProfileBlocked,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful unblock, through a block status setting operation.\\n     *\\n     * @param byProfileId The ID of the profile that executed the block status change.\\n     * @param idOfProfileUnblocked The ID of the profile whose block status have been set to unblocked.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The timestamp of the unblock operation.\\n     */\\n    event Unblocked(\\n        uint256 indexed byProfileId,\\n        uint256 idOfProfileUnblocked,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted via callback when a collectNFT is transferred.\\n     *\\n     * @param profileId The token ID of the profile associated with the collectNFT being transferred.\\n     * @param pubId The publication ID associated with the collectNFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTTransferred(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 indexed collectNFTId,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when the treasury address is set.\\n     *\\n     * @param prevTreasury The previous treasury address.\\n     * @param newTreasury The new treasury address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event TreasurySet(address indexed prevTreasury, address indexed newTreasury, uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted when the treasury fee is set.\\n     *\\n     * @param prevTreasuryFee The previous treasury fee in BPS.\\n     * @param newTreasuryFee The new treasury fee in BPS.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event TreasuryFeeSet(uint16 indexed prevTreasuryFee, uint16 indexed newTreasuryFee, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when the metadata associated with a profile is set in the `LensPeriphery`.\\n     *\\n     * @param profileId The profile ID the metadata is set for.\\n     * @param metadata The metadata set for the profile and user.\\n     * @param transactionExecutor The address of the account that executed this operation.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileMetadataSet(\\n        uint256 indexed profileId,\\n        string metadata,\\n        address transactionExecutor,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when an address' Profile Guardian state change is triggered.\\n     *\\n     * @param wallet The address whose Token Guardian state change is being triggered.\\n     * @param enabled True if the Token Guardian is being enabled, false if it is being disabled.\\n     * @param tokenGuardianDisablingTimestamp The UNIX timestamp when disabling the Token Guardian will take effect,\\n     * if disabling it. Zero if the protection is being enabled.\\n     * @param timestamp The UNIX timestamp of the change being triggered.\\n     */\\n    event TokenGuardianStateChanged(\\n        address indexed wallet,\\n        bool indexed enabled,\\n        uint256 tokenGuardianDisablingTimestamp,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a signer's nonce is used and, as a consequence, the next available nonce is updated.\\n     *\\n     * @param signer The signer whose next available nonce was updated.\\n     * @param nonce The next available nonce that can be used to execute a meta-tx successfully.\\n     * @param timestamp The UNIX timestamp of the nonce being used.\\n     */\\n    event NonceUpdated(address indexed signer, uint256 nonce, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a collection's token URI is updated.\\n     * @param fromTokenId The ID of the smallest token that requires its token URI to be refreshed.\\n     * @param toTokenId The ID of the biggest token that requires its token URI to be refreshed. Max uint256 to refresh\\n     * all of them.\\n     */\\n    event BatchMetadataUpdate(uint256 fromTokenId, uint256 toTokenId);\\n}\\n\",\"keccak256\":\"0x477b1fb4a74cbf54824abb7069afdfb6c2e27fbd397f0a309473697a21258841\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Typehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Typehash {\\n\\n    bytes32 constant ACT = keccak256('Act(uint256 publicationActedProfileId,uint256 publicationActedId,uint256 actorProfileId,uint256[] referrerProfileIds,uint256[] referrerPubIds,address actionModuleAddress,bytes actionModuleData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant CHANGE_DELEGATED_EXECUTORS_CONFIG = keccak256('ChangeDelegatedExecutorsConfig(uint256 delegatorProfileId,address[] delegatedExecutors,bool[] approvals,uint64 configNumber,bool switchToGivenConfig,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant COLLECT_LEGACY = keccak256('CollectLegacy(uint256 publicationCollectedProfileId,uint256 publicationCollectedId,uint256 collectorProfileId,uint256 referrerProfileId,uint256 referrerPubId,bytes collectModuleData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant COMMENT = keccak256('Comment(uint256 profileId,string contentURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant EIP712_DOMAIN = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n    bytes32 constant FOLLOW = keccak256('Follow(uint256 followerProfileId,uint256[] idsOfProfilesToFollow,uint256[] followTokenIds,bytes[] datas,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant MIRROR = keccak256('Mirror(uint256 profileId,string metadataURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant POST = keccak256('Post(uint256 profileId,string contentURI,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant QUOTE = keccak256('Quote(uint256 profileId,string contentURI,uint256 pointedProfileId,uint256 pointedPubId,uint256[] referrerProfileIds,uint256[] referrerPubIds,bytes referenceModuleData,address[] actionModules,bytes[] actionModulesInitDatas,address referenceModule,bytes referenceModuleInitData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant SET_BLOCK_STATUS = keccak256('SetBlockStatus(uint256 byProfileId,uint256[] idsOfProfilesToSetBlockStatus,bool[] blockStatus,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant SET_FOLLOW_MODULE = keccak256('SetFollowModule(uint256 profileId,address followModule,bytes followModuleInitData,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant SET_PROFILE_METADATA_URI = keccak256('SetProfileMetadataURI(uint256 profileId,string metadataURI,uint256 nonce,uint256 deadline)');\\n\\n    bytes32 constant UNFOLLOW = keccak256('Unfollow(uint256 unfollowerProfileId,uint256[] idsOfProfilesToUnfollow,uint256 nonce,uint256 deadline)');\\n}\\n\",\"keccak256\":\"0x87f093ee82509e922eb108841432d4e0f12e2253c6f5f865c348b8188f88f72c\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Types\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary Types {\\n    /**\\n     * @notice ERC721Timestamped storage. Contains the owner address and the mint timestamp for every NFT.\\n     *\\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\\n     * _tokenData mapping, alongside the mint timestamp.\\n     *\\n     * @param owner The token owner.\\n     * @param mintTimestamp The mint timestamp.\\n     */\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice A struct containing token follow-related data.\\n     *\\n     * @param followerProfileId The ID of the profile using the token to follow.\\n     * @param originalFollowTimestamp The timestamp of the first follow performed with the token.\\n     * @param followTimestamp The timestamp of the current follow, if a profile is using the token to follow.\\n     * @param profileIdAllowedToRecover The ID of the profile allowed to recover the follow ID, if any.\\n     */\\n    struct FollowData {\\n        uint160 followerProfileId;\\n        uint48 originalFollowTimestamp;\\n        uint48 followTimestamp;\\n        uint256 profileIdAllowedToRecover;\\n    }\\n\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     * @param Post A standard post, having an URI, action modules and no pointer to another publication.\\n     * @param Comment A comment, having an URI, action modules and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or action modules.\\n     * @param Quote A quote, having an URI, action modules, and a pointer to another publication.\\n     */\\n    enum PublicationType {\\n        Nonexistent,\\n        Post,\\n        Comment,\\n        Mirror,\\n        Quote\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter.\\n     * @param deadline The signature's deadline.\\n     */\\n    struct EIP712Signature {\\n        address signer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be address(0) in none.\\n     * @param followNFT The address of the followNFT associated with this profile. It can be address(0) if the\\n     * profile has not been followed yet, as the collection is lazy-deployed upon the first follow.\\n     * @param __DEPRECATED__handle DEPRECATED in V2: handle slot, was replaced with LensHandles.\\n     * @param __DEPRECATED__imageURI DEPRECATED in V2: The URI to be used for the profile image.\\n     * @param __DEPRECATED__followNFTURI DEPRECATED in V2: The URI used for the follow NFT image.\\n     * @param metadataURI MetadataURI is used to store the profile's metadata, for example: displayed name, description,\\n     * interests, etc.\\n     */\\n    struct Profile {\\n        uint256 pubCount; // offset 0\\n        address followModule; // offset 1\\n        address followNFT; // offset 2\\n        string __DEPRECATED__handle; // offset 3\\n        string __DEPRECATED__imageURI; // offset 4\\n        string __DEPRECATED__followNFTURI; // Deprecated in V2 as we have a common tokenURI for all Follows, offset 5\\n        string metadataURI; // offset 6\\n    }\\n\\n    /**\\n     * @notice A struct containing publication data.\\n     *\\n     * @param pointedProfileId The profile token ID to point the publication to.\\n     * @param pointedPubId The publication ID to point the publication to.\\n     * These are used to implement the \\\"reference\\\" feature of the platform and is used in:\\n     * - Mirrors\\n     * - Comments\\n     * - Quotes\\n     * There are (0,0) if the publication is not pointing to any other publication (i.e. the publication is a Post).\\n     * @param contentURI The URI to set for the content of publication (can be ipfs, arweave, http, etc).\\n     * @param referenceModule Reference module associated with this profile, if any.\\n     * @param __DEPRECATED__collectModule Collect module associated with this publication, if any. Deprecated in V2.\\n     * @param __DEPRECATED__collectNFT Collect NFT associated with this publication, if any. Deprecated in V2.\\n     * @param pubType The type of publication, can be Nonexistent, Post, Comment, Mirror or Quote.\\n     * @param rootProfileId The profile ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param rootPubId The publication ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param actionModuleEnabled The action modules enabled in a given publication.\\n     */\\n    struct Publication {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        mapping(address => bool) actionModuleEnabled;\\n    }\\n\\n    struct PublicationMemory {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        // bytes32 __ACTION_MODULE_ENABLED_MAPPING; // Mappings are not supported in memory.\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     */\\n    struct CreateProfileParams {\\n        address to;\\n        address followModule;\\n        bytes followModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostParams {\\n        uint256 profileId;\\n        string contentURI;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID to point the comment to.\\n     * @param pointedPubId The publication ID to point the comment to.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `quote()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is quoted.\\n     * @param pointedPubId The publication ID that is quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct QuoteParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` or `quote()` internal functions.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is commented on/quoted.\\n     * @param pointedPubId The publication ID that is commented on/quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct ReferencePubParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param metadataURI the URI containing metadata attributes to attach to this mirror publication.\\n     * @param pointedProfileId The profile token ID to point the mirror to.\\n     * @param pointedPubId The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     */\\n    struct MirrorParams {\\n        uint256 profileId;\\n        string metadataURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n    }\\n\\n    /**\\n     * Deprecated in V2: Will be removed after some time after upgrading to V2.\\n     * @notice A struct containing the parameters required for the legacy `collect()` function.\\n     * @dev The referrer can only be a mirror of the publication being collected.\\n     *\\n     * @param publicationCollectedProfileId The token ID of the profile that published the publication to collect.\\n     * @param publicationCollectedId The publication to collect's publication ID.\\n     * @param collectorProfileId The collector profile.\\n     * @param referrerProfileId The ID of a profile that authored a mirror that helped discovering the collected pub.\\n     * @param referrerPubId The ID of the mirror that helped discovering the collected pub.\\n     * @param collectModuleData The arbitrary data to pass to the collectModule if needed.\\n     */\\n    struct LegacyCollectParams {\\n        uint256 publicationCollectedProfileId;\\n        uint256 publicationCollectedId;\\n        uint256 collectorProfileId;\\n        uint256 referrerProfileId;\\n        uint256 referrerPubId;\\n        bytes collectModuleData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `action()` function.\\n     *\\n     * @param publicationActedProfileId The token ID of the profile that published the publication to action.\\n     * @param publicationActedId The publication to action's publication ID.\\n     * @param actorProfileId The actor profile.\\n     * @param referrerProfileId\\n     * @param referrerPubId\\n     * @param actionModuleAddress\\n     * @param actionModuleData The arbitrary data to pass to the actionModule if needed.\\n     */\\n    struct PublicationActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        address actionModuleAddress;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        address actorProfileOwner;\\n        address transactionExecutor;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessCommentParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessQuoteParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessMirrorParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice A struct containing a profile's delegated executors configuration.\\n     *\\n     * @param isApproved Tells when an address is approved as delegated executor in the given configuration number.\\n     * @param configNumber Current configuration number in use.\\n     * @param prevConfigNumber Previous configuration number set, before switching to the current one.\\n     * @param maxConfigNumberSet Maximum configuration number ever used.\\n     */\\n    struct DelegatedExecutorsConfig {\\n        mapping(uint256 => mapping(address => bool)) isApproved; // isApproved[configNumber][delegatedExecutor]\\n        uint64 configNumber;\\n        uint64 prevConfigNumber;\\n        uint64 maxConfigNumberSet;\\n    }\\n\\n    struct TreasuryData {\\n        address treasury;\\n        uint16 treasuryFeeBPS;\\n    }\\n\\n    struct MigrationParams {\\n        address lensHandlesAddress;\\n        address tokenHandleRegistryAddress;\\n        address legacyFeeFollowModule;\\n        address legacyProfileFollowModule;\\n        address newFeeFollowModule;\\n    }\\n}\\n\",\"keccak256\":\"0xffe0b820ba574fcfed3e5df59cede6c65f5e1da294c43c46ca9b87139775c885\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/ActionRestricted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport {Errors} from './constants/Errors.sol';\\n\\n/**\\n * @title ActionRestricted\\n * @author Lens Protocol\\n *\\n * @notice This abstract contract adds a public `ACTION_MODULE` immutable field, and `onlyActionModule` modifier,\\n * to inherit from contracts that have functions restricted to be only called by the Action Modules.\\n */\\nabstract contract ActionRestricted {\\n    address public immutable ACTION_MODULE;\\n\\n    modifier onlyActionModule() {\\n        if (msg.sender != ACTION_MODULE) {\\n            revert Errors.NotActionModule();\\n        }\\n        _;\\n    }\\n\\n    constructor(address actionModule) {\\n        ACTION_MODULE = actionModule;\\n    }\\n}\\n\",\"keccak256\":\"0xc0cbbe631b77bb8d238509fd2dd8d35a795bfac5a5cf090d04e6b158b58d9add\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Errors {\\n    error FollowInvalid();\\n    error ModuleDataMismatch();\\n    error NotHub();\\n    error InitParamsInvalid();\\n    error InvalidParams();\\n    error MintLimitExceeded();\\n    error CollectExpired();\\n    error NotActionModule();\\n    error CollectNotAllowed();\\n    error AlreadyInitialized();\\n}\\n\",\"keccak256\":\"0x97050f82838b8c13a931705209f2301eebcf3e63e6f30014e325f3a4d1555f28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200272e3803806200272e833981016040819052620000349162000076565b6001600160a01b039081166080521660a052600e805460ff19166001179055620000ae565b80516001600160a01b03811681146200007157600080fd5b919050565b600080604083850312156200008a57600080fd5b620000958362000059565b9150620000a56020840162000059565b90509250929050565b60805160a051612637620000f7600039600081816103ef01528181610d7d0152818161146b01528181611522015261163d0152600081816102c40152610a1a01526126376000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80634f558e79116100f9578063a22cb46511610097578063c0da9bcd11610071578063c0da9bcd14610424578063c87b56dd14610476578063e985e9c514610489578063ed24911d146104d257600080fd5b8063a22cb465146103d7578063a4c52b86146103ea578063b88d4fde1461041157600080fd5b80636a627842116100d35780636a6278421461037357806370a08231146103865780637ecebe001461039957806395d89b41146103cf57600080fd5b80634f558e791461033a57806350ddf35c1461034d5780636352211e1461036057600080fd5b80632a55205a116101665780633a755ed1116101405780633a755ed1146102e65780634209a2e11461030157806342842e0e1461031457806342966c681461032757600080fd5b80632a55205a1461026d57806337d09588146102ac578063397a2a88146102bf57600080fd5b8063095ea7b311610197578063095ea7b31461023357806318160ddd1461024857806323b872dd1461025a57600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc366004611e0c565b6104da565b60405190151581526020015b60405180910390f35b6101ee6104fa565b6040516101dd9190611e97565b61020e610209366004611eaa565b6105de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b610246610241366004611ee5565b610662565b005b6008545b6040519081526020016101dd565b610246610268366004611f11565b610771565b61028061027b366004611f52565b6107bc565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101dd565b6102466102ba366004612096565b6107dd565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b600b54600c54604080519283526020830191909152016101dd565b61024661030f366004611eaa565b61087d565b610246610322366004611f11565b610892565b610246610335366004611eaa565b6108ad565b6101d1610348366004611eaa565b6108f6565b61024c61035b366004611eaa565b610922565b61020e61036e366004611eaa565b6109a4565b61024c610381366004612129565b610a00565b61024c610394366004612129565b610a86565b61024c6103a7366004612129565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205490565b6101ee610afe565b6102466103e5366004612154565b610b5b565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b61024661041f36600461218d565b610bb9565b610437610432366004611eaa565b610c0b565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020928301516bffffffffffffffffffffffff1692810192909252016101dd565b6101ee610484366004611eaa565b610cdc565b6101d161049736600461220d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024c610e1c565b60006104e582610e26565b806104f457506104f482610ebe565b92915050565b60606000600f805461050b9061223b565b90501161054d5761051d600b54611085565b610528600c54611085565b60405160200161053992919061228e565b604051602081830303815290604052905090565b600f805461055a9061223b565b80601f01602080910402602001604051908101604052809291908181526020018280546105869061223b565b80156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b50505050505b905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610639576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061066d826109a4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106d4576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff82161480159061072b575073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152604080832033845290915290205460ff16155b15610762576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076c8383611143565b505050565b61077b33826111e3565b6107b1576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076c8383836112a3565b6000806107c884611428565b6107d285856115a2565b915091509250929050565b600e5460ff161561081a576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561085261ffff82166115cb565b600b859055600c849055600f6108688482612357565b5060106108758382612357565b505050505050565b61088681611610565b61088f816115cb565b50565b61076c83838360405180602001604052806000815250610bb9565b6108b733826111e3565b6108ed576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088f81611717565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1615156104f4565b6000818152600260205260408120547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16808203610990576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6bffffffffffffffffffffffff1692915050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806104f4576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a71576040517fbf15b84400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d8054600101908190556104f483826117c4565b600073ffffffffffffffffffffffffffffffffffffffff8216610ad5576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600060108054610b0f9061223b565b905011610b4e575060408051808201909152600c81527f4c454e532d434f4c4c4543540000000000000000000000000000000000000000602082015290565b6010805461055a9061223b565b3373ffffffffffffffffffffffffffffffffffffffff831603610baa576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bb53383836118df565b5050565b610bc333836111e3565b610bf9576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c0584848484611977565b50505050565b604080518082019091526000808252602082015260008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16610c7a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009081526002602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015290565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16610d3a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b54600c546040517fb5a3149600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263b5a3149692610db992600401918252602082015260400190565b600060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104f49190810190612471565b60006105d96119c4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806104f457507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610f5157507fffffffff0000000000000000000000000000000000000000000000000000000082167fc744eb3500000000000000000000000000000000000000000000000000000000145b80610f9d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f42966c6800000000000000000000000000000000000000000000000000000000145b80610fe957507fffffffff0000000000000000000000000000000000000000000000000000000082167f93ea2f1d00000000000000000000000000000000000000000000000000000000145b8061103557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806104f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104f4565b6060600061109283611b5f565b600101905060008167ffffffffffffffff8111156110b2576110b2611f74565b6040519080825280601f01601f1916602001820160405280156110dc576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846110e657509392505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061119d826109a4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111ef836109a4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061125e57508373ffffffffffffffffffffffffffffffffffffffff16611246846105de565b73ffffffffffffffffffffffffffffffffffffffff16145b8061129b575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff166112c3826109a4565b73ffffffffffffffffffffffffffffffffffffffff1614611310576040517f49e27cff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661135d576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611368600082611143565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260036020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905593861680835284832080546001019055858352600290915283822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016821790559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b546040517f4f558e7900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634f558e79916114a29160040190815260200190565b602060405180830381865afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e391906124e8565b6114ef57506000919050565b600b546040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190612505565b60006127106115b060115490565b6115ba9084612522565b6115c49190612560565b9392505050565b612710811115611607576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088f81601155565b600b546040517f6352211e00000000000000000000000000000000000000000000000000000000815233917f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691636352211e916116899160040190815260200190565b602060405180830381865afa1580156116a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ca9190612505565b73ffffffffffffffffffffffffffffffffffffffff161461088f576040517ff194fae500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611722826109a4565b905061172f600083611143565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260036020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081019091556008805490910190558583526002909152808220829055518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff8216158061180a575060008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b15611841576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602090815260408083208054600190810190915560088054909101905584835260029091528082206bffffffffffffffffffffffff421674010000000000000000000000000000000000000000028417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119828484846112a3565b61198e84848484611c41565b610c05576040517f85d5821e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003073db46d1dc155634fbc732f92e853b10b288ad5a1d1480156119e95750608946145b15611a1357507fbf9544cf7d7a0338fc4f071be35409a61e51e9caef559305410ad74e16a05f2d90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f3073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611ac59190810190612471565b8051602091820120604080518082018252600181527f320000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a560608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ba8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611bd4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611bf257662386f26fc10000830492506010015b6305f5e1008310611c0a576305f5e100830492506008015b6127108310611c1e57612710830492506004015b60648310611c30576064830492506002015b600a83106104f45760010192915050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15611dd3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611cb890339089908890889060040161259b565b6020604051808303816000875af1925050508015611d11575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611d0e918101906125e4565b60015b611d88573d808015611d3f576040519150601f19603f3d011682016040523d82523d6000602084013e611d44565b606091505b508051600003611d80576040517f85d5821e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061129b565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461088f57600080fd5b600060208284031215611e1e57600080fd5b81356115c481611dde565b60005b83811015611e44578181015183820152602001611e2c565b50506000910152565b60008151808452611e65816020860160208601611e29565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006115c46020830184611e4d565b600060208284031215611ebc57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461088f57600080fd5b60008060408385031215611ef857600080fd5b8235611f0381611ec3565b946020939093013593505050565b600080600060608486031215611f2657600080fd5b8335611f3181611ec3565b92506020840135611f4181611ec3565b929592945050506040919091013590565b60008060408385031215611f6557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611fea57611fea611f74565b604052919050565b600067ffffffffffffffff82111561200c5761200c611f74565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061204b61204684611ff2565b611fa3565b905082815283838301111561205f57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261208757600080fd5b6115c483833560208501612038565b600080600080600060a086880312156120ae57600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156120d457600080fd5b6120e089838a01612076565b945060608801359150808211156120f657600080fd5b5061210388828901612076565b925050608086013561ffff8116811461211b57600080fd5b809150509295509295909350565b60006020828403121561213b57600080fd5b81356115c481611ec3565b801515811461088f57600080fd5b6000806040838503121561216757600080fd5b823561217281611ec3565b9150602083013561218281612146565b809150509250929050565b600080600080608085870312156121a357600080fd5b84356121ae81611ec3565b935060208501356121be81611ec3565b925060408501359150606085013567ffffffffffffffff8111156121e157600080fd5b8501601f810187136121f257600080fd5b61220187823560208401612038565b91505092959194509250565b6000806040838503121561222057600080fd5b823561222b81611ec3565b9150602083013561218281611ec3565b600181811c9082168061224f57607f821691505b602082108103612288577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4c656e7320436f6c6c656374207c2050726f66696c65202300000000000000008152600083516122c6816018850160208801611e29565b7f202d205075626c69636174696f6e2023000000000000000000000000000000006018918401918201528351612303816028840160208801611e29565b01602801949350505050565b601f82111561076c576000816000526020600020601f850160051c810160208610156123385750805b601f850160051c820191505b8181101561087557828155600101612344565b815167ffffffffffffffff81111561237157612371611f74565b6123858161237f845461223b565b8461230f565b602080601f8311600181146123d857600084156123a25750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610875565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561242557888601518255948401946001909101908401612406565b508582101561246157878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561248357600080fd5b815167ffffffffffffffff81111561249a57600080fd5b8201601f810184136124ab57600080fd5b80516124b961204682611ff2565b8181528560208385010111156124ce57600080fd5b6124df826020830160208601611e29565b95945050505050565b6000602082840312156124fa57600080fd5b81516115c481612146565b60006020828403121561251757600080fd5b81516115c481611ec3565b80820281158282048414176104f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612596577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526125da6080830184611e4d565b9695505050505050565b6000602082840312156125f657600080fd5b81516115c481611dde56fea2646970667358221220c85a59f91fd27e7bb69c2479e48b2c81b7a667cd83526202facc5e6631a8351864736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80634f558e79116100f9578063a22cb46511610097578063c0da9bcd11610071578063c0da9bcd14610424578063c87b56dd14610476578063e985e9c514610489578063ed24911d146104d257600080fd5b8063a22cb465146103d7578063a4c52b86146103ea578063b88d4fde1461041157600080fd5b80636a627842116100d35780636a6278421461037357806370a08231146103865780637ecebe001461039957806395d89b41146103cf57600080fd5b80634f558e791461033a57806350ddf35c1461034d5780636352211e1461036057600080fd5b80632a55205a116101665780633a755ed1116101405780633a755ed1146102e65780634209a2e11461030157806342842e0e1461031457806342966c681461032757600080fd5b80632a55205a1461026d57806337d09588146102ac578063397a2a88146102bf57600080fd5b8063095ea7b311610197578063095ea7b31461023357806318160ddd1461024857806323b872dd1461025a57600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc366004611e0c565b6104da565b60405190151581526020015b60405180910390f35b6101ee6104fa565b6040516101dd9190611e97565b61020e610209366004611eaa565b6105de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b610246610241366004611ee5565b610662565b005b6008545b6040519081526020016101dd565b610246610268366004611f11565b610771565b61028061027b366004611f52565b6107bc565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101dd565b6102466102ba366004612096565b6107dd565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b600b54600c54604080519283526020830191909152016101dd565b61024661030f366004611eaa565b61087d565b610246610322366004611f11565b610892565b610246610335366004611eaa565b6108ad565b6101d1610348366004611eaa565b6108f6565b61024c61035b366004611eaa565b610922565b61020e61036e366004611eaa565b6109a4565b61024c610381366004612129565b610a00565b61024c610394366004612129565b610a86565b61024c6103a7366004612129565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205490565b6101ee610afe565b6102466103e5366004612154565b610b5b565b61020e7f000000000000000000000000000000000000000000000000000000000000000081565b61024661041f36600461218d565b610bb9565b610437610432366004611eaa565b610c0b565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020928301516bffffffffffffffffffffffff1692810192909252016101dd565b6101ee610484366004611eaa565b610cdc565b6101d161049736600461220d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b61024c610e1c565b60006104e582610e26565b806104f457506104f482610ebe565b92915050565b60606000600f805461050b9061223b565b90501161054d5761051d600b54611085565b610528600c54611085565b60405160200161053992919061228e565b604051602081830303815290604052905090565b600f805461055a9061223b565b80601f01602080910402602001604051908101604052809291908181526020018280546105869061223b565b80156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b50505050505b905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610639576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600061066d826109a4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106d4576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff82161480159061072b575073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152604080832033845290915290205460ff16155b15610762576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076c8383611143565b505050565b61077b33826111e3565b6107b1576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61076c8383836112a3565b6000806107c884611428565b6107d285856115a2565b915091509250929050565b600e5460ff161561081a576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561085261ffff82166115cb565b600b859055600c849055600f6108688482612357565b5060106108758382612357565b505050505050565b61088681611610565b61088f816115cb565b50565b61076c83838360405180602001604052806000815250610bb9565b6108b733826111e3565b6108ed576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088f81611717565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1615156104f4565b6000818152600260205260408120547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16808203610990576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6bffffffffffffffffffffffff1692915050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806104f4576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a71576040517fbf15b84400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d8054600101908190556104f483826117c4565b600073ffffffffffffffffffffffffffffffffffffffff8216610ad5576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600060108054610b0f9061223b565b905011610b4e575060408051808201909152600c81527f4c454e532d434f4c4c4543540000000000000000000000000000000000000000602082015290565b6010805461055a9061223b565b3373ffffffffffffffffffffffffffffffffffffffff831603610baa576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bb53383836118df565b5050565b610bc333836111e3565b610bf9576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c0584848484611977565b50505050565b604080518082019091526000808252602082015260008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16610c7a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060009081526002602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015290565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16610d3a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b54600c546040517fb5a3149600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263b5a3149692610db992600401918252602082015260400190565b600060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104f49190810190612471565b60006105d96119c4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806104f457507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610f5157507fffffffff0000000000000000000000000000000000000000000000000000000082167fc744eb3500000000000000000000000000000000000000000000000000000000145b80610f9d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f42966c6800000000000000000000000000000000000000000000000000000000145b80610fe957507fffffffff0000000000000000000000000000000000000000000000000000000082167f93ea2f1d00000000000000000000000000000000000000000000000000000000145b8061103557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806104f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104f4565b6060600061109283611b5f565b600101905060008167ffffffffffffffff8111156110b2576110b2611f74565b6040519080825280601f01601f1916602001820160405280156110dc576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846110e657509392505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061119d826109a4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111ef836109a4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061125e57508373ffffffffffffffffffffffffffffffffffffffff16611246846105de565b73ffffffffffffffffffffffffffffffffffffffff16145b8061129b575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff166112c3826109a4565b73ffffffffffffffffffffffffffffffffffffffff1614611310576040517f49e27cff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661135d576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611368600082611143565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260036020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905593861680835284832080546001019055858352600290915283822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016821790559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b546040517f4f558e7900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634f558e79916114a29160040190815260200190565b602060405180830381865afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e391906124e8565b6114ef57506000919050565b600b546040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190612505565b60006127106115b060115490565b6115ba9084612522565b6115c49190612560565b9392505050565b612710811115611607576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61088f81601155565b600b546040517f6352211e00000000000000000000000000000000000000000000000000000000815233917f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691636352211e916116899160040190815260200190565b602060405180830381865afa1580156116a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ca9190612505565b73ffffffffffffffffffffffffffffffffffffffff161461088f576040517ff194fae500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611722826109a4565b905061172f600083611143565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260036020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081019091556008805490910190558583526002909152808220829055518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff8216158061180a575060008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b15611841576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602090815260408083208054600190810190915560088054909101905584835260029091528082206bffffffffffffffffffffffff421674010000000000000000000000000000000000000000028417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119828484846112a3565b61198e84848484611c41565b610c05576040517f85d5821e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003073db46d1dc155634fbc732f92e853b10b288ad5a1d1480156119e95750608946145b15611a1357507fbf9544cf7d7a0338fc4f071be35409a61e51e9caef559305410ad74e16a05f2d90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f3073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611ac59190810190612471565b8051602091820120604080518082018252600181527f320000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a560608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ba8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611bd4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611bf257662386f26fc10000830492506010015b6305f5e1008310611c0a576305f5e100830492506008015b6127108310611c1e57612710830492506004015b60648310611c30576064830492506002015b600a83106104f45760010192915050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15611dd3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290611cb890339089908890889060040161259b565b6020604051808303816000875af1925050508015611d11575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611d0e918101906125e4565b60015b611d88573d808015611d3f576040519150601f19603f3d011682016040523d82523d6000602084013e611d44565b606091505b508051600003611d80576040517f85d5821e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061129b565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461088f57600080fd5b600060208284031215611e1e57600080fd5b81356115c481611dde565b60005b83811015611e44578181015183820152602001611e2c565b50506000910152565b60008151808452611e65816020860160208601611e29565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006115c46020830184611e4d565b600060208284031215611ebc57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461088f57600080fd5b60008060408385031215611ef857600080fd5b8235611f0381611ec3565b946020939093013593505050565b600080600060608486031215611f2657600080fd5b8335611f3181611ec3565b92506020840135611f4181611ec3565b929592945050506040919091013590565b60008060408385031215611f6557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611fea57611fea611f74565b604052919050565b600067ffffffffffffffff82111561200c5761200c611f74565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600061204b61204684611ff2565b611fa3565b905082815283838301111561205f57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261208757600080fd5b6115c483833560208501612038565b600080600080600060a086880312156120ae57600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156120d457600080fd5b6120e089838a01612076565b945060608801359150808211156120f657600080fd5b5061210388828901612076565b925050608086013561ffff8116811461211b57600080fd5b809150509295509295909350565b60006020828403121561213b57600080fd5b81356115c481611ec3565b801515811461088f57600080fd5b6000806040838503121561216757600080fd5b823561217281611ec3565b9150602083013561218281612146565b809150509250929050565b600080600080608085870312156121a357600080fd5b84356121ae81611ec3565b935060208501356121be81611ec3565b925060408501359150606085013567ffffffffffffffff8111156121e157600080fd5b8501601f810187136121f257600080fd5b61220187823560208401612038565b91505092959194509250565b6000806040838503121561222057600080fd5b823561222b81611ec3565b9150602083013561218281611ec3565b600181811c9082168061224f57607f821691505b602082108103612288577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4c656e7320436f6c6c656374207c2050726f66696c65202300000000000000008152600083516122c6816018850160208801611e29565b7f202d205075626c69636174696f6e2023000000000000000000000000000000006018918401918201528351612303816028840160208801611e29565b01602801949350505050565b601f82111561076c576000816000526020600020601f850160051c810160208610156123385750805b601f850160051c820191505b8181101561087557828155600101612344565b815167ffffffffffffffff81111561237157612371611f74565b6123858161237f845461223b565b8461230f565b602080601f8311600181146123d857600084156123a25750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610875565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561242557888601518255948401946001909101908401612406565b508582101561246157878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561248357600080fd5b815167ffffffffffffffff81111561249a57600080fd5b8201601f810184136124ab57600080fd5b80516124b961204682611ff2565b8181528560208385010111156124ce57600080fd5b6124df826020830160208601611e29565b95945050505050565b6000602082840312156124fa57600080fd5b81516115c481612146565b60006020828403121561251757600080fd5b81516115c481611ec3565b80820281158282048414176104f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612596577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526125da6080830184611e4d565b9695505050505050565b6000602082840312156125f657600080fd5b81516115c481611dde56fea2646970667358221220c85a59f91fd27e7bb69c2479e48b2c81b7a667cd83526202facc5e6631a8351864736f6c63430008170033",
  "devdoc": {
    "author": "Paul Burke",
    "details": "This is a customizable CollectNFT, it differs from the v2 CollectNFT in that the the name and symbol can be set.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "exists(uint256)": {
        "details": "See {IERC721Timestamped-exists}"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "bytes32 The domain separator."
        }
      },
      "getSourcePublicationPointer()": {
        "returns": {
          "_0": "tuple First is the profile ID, and second is the publication ID."
        }
      },
      "initialize(uint256,uint256,string,string,uint16)": {
        "params": {
          "profileId": "The token ID of the profile in the hub that this Collect NFT points to.",
          "pubId": "The profile publication ID in the hub that this Collect NFT points to.",
          "royalty": "The royalty percentage.",
          "tokenName": "The name of the token.",
          "tokenSymbol": "The symbol of the token."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "params": {
          "to": "The address to mint the NFT to."
        },
        "returns": {
          "_0": "uint256 An integer representing the minted token ID."
        }
      },
      "mintTimestampOf(uint256)": {
        "details": "See {IERC721Timestamped-mintTimestampOf}"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nonces(address)": {
        "params": {
          "signer": "The address for which to query the nonce."
        },
        "returns": {
          "_0": "uint256 The current nonce of the given signer."
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "salePrice": "The sale price of the token specified.",
          "tokenId": "The ID of the token queried for royalty information."
        },
        "returns": {
          "_0": "A tuple with the address that should receive the royalties and the royalty payment amount for the given sale price."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setRoyalty(uint256)": {
        "params": {
          "royaltiesInBasisPoints": "The royalty percentage (measured in basis points)."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenDataOf(uint256)": {
        "details": "See {IERC721Timestamped-tokenDataOf}"
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 The current total supply of tokens."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "CustomCollectNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDomainSeparator()": {
        "notice": "Returns the EIP-712 domain separator for this contract."
      },
      "getSourcePublicationPointer()": {
        "notice": "Returns the source publication of this collect NFT."
      },
      "initialize(uint256,uint256,string,string,uint16)": {
        "notice": "Initializes the collect NFT, setting the feed as the privileged minter, storing the collected publication pointer and initializing the name and symbol in the LensNFTBase contract."
      },
      "mint(address)": {
        "notice": "Mints a collect NFT to the specified address. This can only be called by the hub and is called upon collection."
      },
      "nonces(address)": {
        "notice": "Returns the current signature nonce of the given signer."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Called with the sale price to determine how much royalty is owed and to whom."
      },
      "setRoyalty(uint256)": {
        "notice": "Changes the royalty percentage for secondary sales."
      },
      "totalSupply()": {
        "notice": "Returns the amount of tokens in circulation."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6495,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6497,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6502,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_tokenData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(TokenData)10170_storage)"
      },
      {
        "astId": 6506,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6510,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6516,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6522,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "__DEPRECATED__ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6526,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "__DEPRECATED__ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6528,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6532,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "__DEPRECATED__allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6536,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4992,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_profileId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4994,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_pubId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4996,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4998,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 5000,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_name",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 5002,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 5004,
        "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
        "label": "_royaltiesInBasisPoints",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenData)10170_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)10170_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)10170_storage": {
        "encoding": "inplace",
        "label": "struct Types.TokenData",
        "members": [
          {
            "astId": 10167,
            "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10169,
            "contract": "contracts/CustomCollectNFT.sol:CustomCollectNFT",
            "label": "mintTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}