{
  "address": "0xBA8670dB2EBa711fA588F0745bBaC8396aa51e7e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "profileNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lensProtocol",
          "type": "address"
        },
        {
          "internalType": "contract IModuleRegistry",
          "name": "moduleRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collectNFTImpl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollectAlreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeAlreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitParamsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipientSplits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFollowing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotHub",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OngoingAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecipientSplitCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyRecipients",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnavailableAuction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "availableSinceTimestamp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minTimeAfterBid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "split",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct RecipientData[]",
          "name": "recipients",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onlyFollowers",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tokenSymbol",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tokenRoyalty",
          "type": "uint16"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "referrerProfileIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidderOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderProfileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactionExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectNFT",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CollectNFTDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectedProfileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectedPubId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectorProfileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collectNFT",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Collected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FeeProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactionExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "InitializedPublicationAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ModuleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactionExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ProcessedPublicationAction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLECT_NFT_IMPL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODULE_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IModuleRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectedProfileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collectedPubId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        }
      ],
      "name": "getAuctionData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "availableSinceTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "duration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minTimeAfterBid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "endTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBidIncrement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winningBid",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "referralFee",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "winnerProfileId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "onlyFollowers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "collected",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "feeProcessed",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "symbol",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint16",
                  "name": "royalty",
                  "type": "uint16"
                }
              ],
              "internalType": "struct TokenData",
              "name": "tokenData",
              "type": "tuple"
            }
          ],
          "internalType": "struct AuctionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        }
      ],
      "name": "getCollectNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getModuleMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        }
      ],
      "name": "getRecipients",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "split",
              "type": "uint16"
            }
          ],
          "internalType": "struct RecipientData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "transactionExecutor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initializePublicationAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "publicationActedProfileId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicationActedId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "actorProfileId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "actorProfileOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transactionExecutor",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerProfileIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "referrerPubIds",
              "type": "uint256[]"
            },
            {
              "internalType": "enum Types.PublicationType[]",
              "name": "referrerPubTypes",
              "type": "uint8[]"
            },
            {
              "internalType": "bytes",
              "name": "actionModuleData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Types.ProcessActionParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "processPublicationAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "setModuleMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f06ed95870d49b609ee2f12850a6ca96f1cf6faf32f3d07eecceb0764a17e90",
  "receipt": {
    "to": null,
    "from": "0xA82C8f5A03AeB2221abEdB51d9E462aFd9f63CD4",
    "contractAddress": "0xBA8670dB2EBa711fA588F0745bBaC8396aa51e7e",
    "transactionIndex": 2,
    "gasUsed": "3211445",
    "logsBloom": "0x
    "blockHash": "0x7dc1fe87d16c907122059265c706d084d56c28d0f37fe2cf67b37afa7d285a19",
    "transactionHash": "0x0f06ed95870d49b609ee2f12850a6ca96f1cf6faf32f3d07eecceb0764a17e90",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 6790592,
        "transactionHash": "0x0f06ed95870d49b609ee2f12850a6ca96f1cf6faf32f3d07eecceb0764a17e90",
        "address": "0xBA8670dB2EBa711fA588F0745bBaC8396aa51e7e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x7dc1fe87d16c907122059265c706d084d56c28d0f37fe2cf67b37afa7d285a19"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 6790592,
        "transactionHash": "0x0f06ed95870d49b609ee2f12850a6ca96f1cf6faf32f3d07eecceb0764a17e90",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a82c8f5a03aeb2221abedb51d9e462afd9f63cd4",
          "0x000000000000000000000000ac75d6efec891724b88b916b36e2ef38bcbec73f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c8cdf1648e700000000000000000000000000000000000000000000000000165bfc3dd75cca2a00000000000000000000000000000000000000000000014e1363c4160c844dd0000000000000000000000000000000000000000000000000164f6f5ec113e32a00000000000000000000000000000000000000000000014e137050f522cd34d0",
        "logIndex": 6,
        "blockHash": "0x7dc1fe87d16c907122059265c706d084d56c28d0f37fe2cf67b37afa7d285a19"
      }
    ],
    "blockNumber": 6790592,
    "cumulativeGasUsed": "3782551",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0xA2574D9DdB6A325Ad2Be838Bd854228B80215148",
    "0x9E81eD8099dF82004D298144138C12AbB959DF1E",
    "0x6511B9CE24E1198F4803e652B58ABB687484A6d0"
  ],
  "numDeployments": 3,
  "solcInputHash": "997247cb3e9eab2cd37dc0714645ee0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"profileNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lensProtocol\",\"type\":\"address\"},{\"internalType\":\"contract IModuleRegistry\",\"name\":\"moduleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectNFTImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollectAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitParamsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipientSplits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFollowing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotHub\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OngoingAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientSplitCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnavailableAuction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"availableSinceTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minTimeAfterBid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct RecipientData[]\",\"name\":\"recipients\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onlyFollowers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenSymbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenRoyalty\",\"type\":\"uint16\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"referrerProfileIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderProfileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CollectNFTDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectedProfileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectedPubId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectorProfileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collectNFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InitializedPublicationAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ModuleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ProcessedPublicationAction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLECT_NFT_IMPL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODULE_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IModuleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectedProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedPubId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getAuctionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"availableSinceTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTimeAfterBid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"endTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerProfileId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyFollowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"feeProcessed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"royalty\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"internalType\":\"struct AuctionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getCollectNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModuleMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getRecipients\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"split\",\"type\":\"uint16\"}],\"internalType\":\"struct RecipientData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializePublicationAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"publicationActedProfileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicationActedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actorProfileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actorProfileOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactionExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerProfileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referrerPubIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Types.PublicationType[]\",\"name\":\"referrerPubTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"actionModuleData\",\"type\":\"bytes\"}],\"internalType\":\"struct Types.ProcessActionParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"processPublicationAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setModuleMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"donosonaumczuk, Martijn van Halen and Paul Burke\",\"events\":{\"CollectNFTDeployed(uint256,uint256,address,uint256)\":{\"details\":\"Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\",\"params\":{\"collectNFT\":\"The address of the newly deployed collectNFT clone.\",\"profileId\":\"The publisher's profile token ID.\",\"pubId\":\"The publication associated with the newly deployed collectNFT clone's ID.\",\"timestamp\":\"The current block timestamp.\"}},\"Collected(uint256,uint256,uint256,address,address,uint256,uint256)\":{\"details\":\"Emitted upon a successful collect action.\",\"params\":{\"collectNFT\":\"The address of the NFT collection where the minted collect NFT belongs to.\",\"collectedProfileId\":\"The token ID of the profile that published the collected publication.\",\"collectedPubId\":\"The ID of the collected publication.\",\"collectorProfileId\":\"The token ID of the profile that collected the publication.\",\"nftRecipient\":\"The address that received the collect NFT. and depends on the collect module chosen.\",\"timestamp\":\"The current block timestamp.\",\"tokenId\":\"The token ID of the collect NFT that was minted as a collect of the publication.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(uint256,uint256)\":{\"details\":\"Process the collect by ensuring:  1. Underlying publication's auction has finished.  2. Parameters passed matches expected values (collector is the winner, correct referral info & no custom data).  3. Publication has not been collected yet. This function will also process collect fees if they have not been already processed through `processCollectFee`.\"},\"getAuctionData(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile associated with the underlying publication.\",\"pubId\":\"The publication ID associated with the underlying publication.\"},\"returns\":{\"_0\":\"The auction data for the given publication.\"}},\"initializePublicationAction(uint256,uint256,address,bytes)\":{\"details\":\"See `AuctionData` struct's natspec in order to understand `data` decoded values.\"},\"isRegistered()\":{\"details\":\"Checks if the module is registered in the module registry\",\"returns\":{\"_0\":\"True if the module is registered, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerModule()\":{\"details\":\"Registers the open action in the module registry\",\"returns\":{\"_0\":\"True if the module was registered, false otherwise\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"for now we check for keccak('LENS_MODULE'); Override this and add the type(IModuleInterface).interfaceId for corresponding module type\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_referrerProfileIdByPubByProfile\":{\"details\":\"Maps a given bidder's profile ID to its referrer profile IDs. Referrer matching publication's profile ID means no referral, referrer being zero means that bidder has not bidded yet on this auction. The referrer is set through, and only through, the first bidder's bid on each auction.\"}},\"title\":\"AuctionCollectActionModule\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAuctionData(uint256,uint256)\":{\"notice\":\"If the given publication has an auction, this function returns all its information.\"},\"getModuleMetadataURI()\":{\"notice\":\"Human-readable description of the module\"},\"processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))\":{\"notice\":\"this open action makes the bid as gasless Open action  params.actionModuleData contains amount The bid amount to offer.\"}},\"notice\":\"This module works by creating an English auction for the underlying publication. After the auction ends, only the auction winner is allowed to collect the publication.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionCollectAction.sol\":\"AuctionCollectAction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AuctionCollectAction.sol\":{\"content\":\"// SPDX-License-Identifier:AGPL-3.0\\n\\npragma solidity 0.8.23;\\n\\nimport {IModuleRegistry} from \\\"lens-modules/contracts/interfaces/IModuleRegistry.sol\\\";\\nimport {Types} from \\\"lens-modules/contracts/libraries/constants/Types.sol\\\";\\nimport {Errors} from \\\"lens-modules/contracts/libraries/constants/Errors.sol\\\";\\nimport {IPublicationActionModule} from \\\"lens-modules/contracts/interfaces/IPublicationActionModule.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ILensGovernable} from \\\"lens-modules/contracts/interfaces/ILensGovernable.sol\\\";\\nimport {LensModuleMetadata} from \\\"lens-modules/contracts/modules/LensModuleMetadata.sol\\\";\\nimport {LensModuleRegistrant} from \\\"lens-modules/contracts/modules/base/LensModuleRegistrant.sol\\\";\\nimport {HubRestricted} from \\\"lens-modules/contracts/base/HubRestricted.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {ICustomCollectNFT} from \\\"./interfaces/ICustomCollectNFT.sol\\\";\\nimport {ILensProtocol} from \\\"lens-modules/contracts/interfaces/ILensProtocol.sol\\\";\\n\\n/**\\n * @notice A struct containing recipient data.\\n *\\n * @param recipient The recipient of the a % of auction's winner bid amount.\\n * @param split The % of the winner bid amount fraction of BPS_MAX (10 000)\\n */\\nstruct RecipientData {\\n    address recipient;\\n    uint16 split;\\n}\\n\\n/**\\n * @notice A struct containing the necessary data to create an ERC-721.\\n *\\n * @param name The name of the token.\\n * @param symbol The symbol of the token.\\n * @param royalty The royalty percentage in basis points.\\n */\\nstruct TokenData {\\n    bytes32 name;\\n    bytes32 symbol;\\n    uint16 royalty;\\n}\\n\\n/**\\n * @notice A struct containing the necessary data to execute collect auctions.\\n *\\n * @param availableSinceTimestamp The UNIX timestamp after bids can start to be placed.\\n * @param startTimestamp The UNIX timestamp of the first bid, i.e. when the auction started.\\n * @param duration The seconds that the auction will last after the first bid has been placed.\\n * @param minTimeAfterBid The minimum time, in seconds, that must always remain between last bid's timestamp\\n * and `endTimestamp`. This restriction could make `endTimestamp` to be re-computed and updated.\\n * @param endTimestamp The end of auction UNIX timestamp after which bidding is impossible. Computed inside contract.\\n * @param reservePrice The minimum bid price accepted.\\n * @param minBidIncrement The minimum amount by which a new bid must overcome the last bid.\\n * @param winningBid The winning bid amount.\\n * @param referralFee The percentage of the fee that will be transferred to the referrer in case of having one.\\n * Measured in basis points, each basis point represents 0.01%.\\n * @param currency The currency in which the bids are denominated.\\n * @param winner The current auction winner.\\n * @param onlyFollowers Indicates whether followers are the only allowed to bid, and collect, or not.\\n * @param collected Indicates whether the publication has been collected or not.\\n * @param feeProcessed Indicates whether the auction fee was already processed or not.\\n * @param tokenData The data to create the ERC-721 token.\\n */\\nstruct AuctionData {\\n    uint64 availableSinceTimestamp;\\n    uint64 startTimestamp;\\n    uint32 duration;\\n    uint32 minTimeAfterBid;\\n    uint64 endTimestamp;\\n    uint256 reservePrice;\\n    uint256 minBidIncrement;\\n    uint256 winningBid;\\n    uint16 referralFee;\\n    address currency;\\n    uint256 winnerProfileId;\\n    bool onlyFollowers;\\n    bool collected;\\n    bool feeProcessed;\\n    TokenData tokenData;\\n}\\n\\nstruct InitAuctionData {\\n    uint64 availableSinceTimestamp;\\n    uint32 duration;\\n    uint32 minTimeAfterBid;\\n    uint256 reservePrice;\\n    uint256 minBidIncrement;\\n    uint16 referralFee;\\n    address currency;\\n    RecipientData[] recipients;\\n    bool onlyFollowers;\\n    bytes32 tokenName;\\n    bytes32 tokenSymbol;\\n    uint16 tokenRoyalty;\\n}\\n\\nerror ModuleDataMismatch();\\n\\n/**\\n * @title AuctionCollectActionModule\\n * @author donosonaumczuk, Martijn van Halen and Paul Burke\\n *\\n * @notice This module works by creating an English auction for the underlying publication. After the auction ends, only\\n * the auction winner is allowed to collect the publication.\\n */\\ncontract AuctionCollectAction is\\n    IPublicationActionModule,\\n    HubRestricted,\\n    LensModuleMetadata,\\n    LensModuleRegistrant\\n{\\n    using SafeERC20 for IERC20;\\n    uint16 internal constant BPS_MAX = 10000;\\n\\n    error OngoingAuction();\\n    error UnavailableAuction();\\n    error CollectAlreadyProcessed();\\n    error FeeAlreadyProcessed();\\n    error InsufficientBidAmount();\\n    error TooManyRecipients();\\n    error InvalidRecipientSplits();\\n    error RecipientSplitCannotBeZero();\\n\\n    event InitializedPublicationAction(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address transactionExecutor,\\n        bytes data\\n    );\\n\\n    event ProcessedPublicationAction(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address transactionExecutor,\\n        bytes data\\n    );\\n\\n    event AuctionCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint64 availableSinceTimestamp,\\n        uint32 duration,\\n        uint32 minTimeAfterBid,\\n        uint256 reservePrice,\\n        uint256 minBidIncrement,\\n        uint16 referralFee,\\n        address currency,\\n        RecipientData[] recipients,\\n        bool onlyFollowers,\\n        bytes32 tokenName,\\n        bytes32 tokenSymbol,\\n        uint16 tokenRoyalty\\n    );\\n\\n    event BidPlaced(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256[] referrerProfileIds,\\n        uint256 amount,\\n        address bidderOwner,\\n        uint256 bidderProfileId,\\n        address transactionExecutor,\\n        uint256 endTimestamp,\\n        uint256 timestamp\\n    );\\n\\n    event FeeProcessed(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The publisher's profile token ID.\\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\\n     * @param collectNFT The address of the newly deployed collectNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTDeployed(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        address indexed collectNFT,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful collect action.\\n     *\\n     * @param collectedProfileId The token ID of the profile that published the collected publication.\\n     * @param collectedPubId The ID of the collected publication.\\n     * @param collectorProfileId The token ID of the profile that collected the publication.\\n     * @param nftRecipient The address that received the collect NFT.\\n     * and depends on the collect module chosen.\\n     * @param collectNFT The address of the NFT collection where the minted collect NFT belongs to.\\n     * @param tokenId The token ID of the collect NFT that was minted as a collect of the publication.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Collected(\\n        uint256 indexed collectedProfileId,\\n        uint256 indexed collectedPubId,\\n        uint256 indexed collectorProfileId,\\n        address nftRecipient,\\n        address collectNFT,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    );\\n\\n    address public immutable COLLECT_NFT_IMPL;\\n    address private immutable TREASURY;\\n    address private immutable PROFILE_NFT;\\n    address private immutable LENS_PROTOCOL;\\n\\n    mapping(uint256 profileId => mapping(uint256 pubId => address collectNFT))\\n        internal _collectNFTByPub;\\n\\n    mapping(uint256 profileId => mapping(uint256 pubId => AuctionData auctionData))\\n        internal _auctionDataByPubByProfile;\\n\\n    mapping(uint256 profileId => mapping(uint256 pubId => RecipientData[] recipients))\\n        internal _recipientsByPublicationByProfile;\\n\\n    /**\\n     * @dev Maps a given bidder's profile ID to its referrer profile IDs. Referrer matching publication's profile ID means\\n     * no referral, referrer being zero means that bidder has not bidded yet on this auction.\\n     * The referrer is set through, and only through, the first bidder's bid on each auction.\\n     */\\n    mapping(uint256 profileId => mapping(uint256 pubId => mapping(uint256 bidderProfileId => uint256[] referrerProfileIds)))\\n        internal _referrerProfileIdByPubByProfile;\\n\\n    constructor(\\n        address hub,\\n        address treasury,\\n        address profileNFT,\\n        address lensProtocol,\\n        IModuleRegistry moduleRegistry,\\n        address collectNFTImpl\\n    )\\n        Ownable()\\n        HubRestricted(hub)\\n        LensModuleMetadata()\\n        LensModuleRegistrant(moduleRegistry)\\n    {\\n        TREASURY = treasury;\\n        PROFILE_NFT = profileNFT;\\n        LENS_PROTOCOL = lensProtocol;\\n        COLLECT_NFT_IMPL = collectNFTImpl;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public pure virtual override returns (bool) {\\n        return\\n            interfaceID == type(IPublicationActionModule).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n\\n    function _validateInitParams(InitAuctionData memory data) internal view {\\n        if (\\n            data.duration == 0 ||\\n            data.duration < data.minTimeAfterBid ||\\n            !MODULE_REGISTRY.isErc20CurrencyRegistered(data.currency) ||\\n            data.referralFee > BPS_MAX\\n        ) {\\n            revert Errors.InitParamsInvalid();\\n        }\\n    }\\n\\n    function decodeInitParams(\\n        bytes calldata data\\n    ) internal pure returns (InitAuctionData memory) {\\n        (\\n            uint64 availableSinceTimestamp,\\n            uint32 duration,\\n            uint32 minTimeAfterBid,\\n            uint256 reservePrice,\\n            uint256 minBidIncrement,\\n            uint16 referralFee,\\n            address currency,\\n            RecipientData[] memory recipients,\\n            bool onlyFollowers,\\n            bytes32 tokenName,\\n            bytes32 tokenSymbol,\\n            uint16 tokenRoyalty\\n        ) = abi.decode(\\n                data,\\n                (\\n                    uint64,\\n                    uint32,\\n                    uint32,\\n                    uint256,\\n                    uint256,\\n                    uint16,\\n                    address,\\n                    RecipientData[],\\n                    bool,\\n                    bytes32,\\n                    bytes32,\\n                    uint16\\n                )\\n            );\\n\\n        return\\n            InitAuctionData({\\n                availableSinceTimestamp: availableSinceTimestamp,\\n                duration: duration,\\n                minTimeAfterBid: minTimeAfterBid,\\n                reservePrice: reservePrice,\\n                minBidIncrement: minBidIncrement,\\n                referralFee: referralFee,\\n                currency: currency,\\n                recipients: recipients,\\n                onlyFollowers: onlyFollowers,\\n                tokenName: tokenName,\\n                tokenSymbol: tokenSymbol,\\n                tokenRoyalty: tokenRoyalty\\n            });\\n    }\\n\\n    /**\\n     * @dev See `AuctionData` struct's natspec in order to understand `data` decoded values.\\n     *\\n     *\\n     */\\n    function initializePublicationAction(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address transactionExecutor,\\n        bytes calldata data\\n    ) external override onlyHub returns (bytes memory) {\\n        emit InitializedPublicationAction(\\n            profileId,\\n            pubId,\\n            transactionExecutor,\\n            data\\n        );\\n\\n        InitAuctionData memory initData = decodeInitParams(data);\\n\\n        _validateInitParams(initData);\\n        _validateAndStoreRecipients(initData.recipients, profileId, pubId);\\n\\n        _initAuction(profileId, pubId, initData);\\n        return data;\\n    }\\n\\n    /**\\n     *  this open action makes the bid as gasless Open action\\n     *  params.actionModuleData contains amount The bid amount to offer.\\n     */\\n    function processPublicationAction(\\n        Types.ProcessActionParams calldata params\\n    ) external override onlyHub returns (bytes memory) {\\n        emit ProcessedPublicationAction(\\n            params.publicationActedProfileId,\\n            params.publicationActedId,\\n            params.transactionExecutor,\\n            params.actionModuleData\\n        );\\n\\n        uint256 amount = abi.decode(params.actionModuleData, (uint256));\\n\\n        _bid(\\n            params.publicationActedProfileId,\\n            params.publicationActedId,\\n            params.referrerProfileIds,\\n            amount,\\n            params.actorProfileOwner,\\n            params.actorProfileId,\\n            params.transactionExecutor\\n        );\\n\\n        return params.actionModuleData;\\n    }\\n\\n    /**\\n     * @notice If the given publication has an auction, this function returns all its information.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     *\\n     * @return The auction data for the given publication.\\n     */\\n    function getAuctionData(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (AuctionData memory) {\\n        return _auctionDataByPubByProfile[profileId][pubId];\\n    }\\n\\n    // get recipients\\n    function getRecipients(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (RecipientData[] memory) {\\n        return _recipientsByPublicationByProfile[profileId][pubId];\\n    }\\n\\n    function bytes32ToString(\\n        bytes32 _bytes32\\n    ) private pure returns (string memory) {\\n        bytes memory bytesArray = new bytes(32);\\n        for (uint256 i; i < 32; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function _deployCollectNFT(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address collectNFTImpl\\n    ) private returns (address) {\\n        address collectNFT = Clones.clone(collectNFTImpl);\\n        AuctionData storage auction = _auctionDataByPubByProfile[profileId][\\n            pubId\\n        ];\\n\\n        ICustomCollectNFT(collectNFT).initialize(\\n            profileId,\\n            pubId,\\n            bytes32ToString(auction.tokenData.name),\\n            bytes32ToString(auction.tokenData.symbol),\\n            auction.tokenData.royalty\\n        );\\n        emit CollectNFTDeployed(profileId, pubId, collectNFT, block.timestamp);\\n\\n        return collectNFT;\\n    }\\n\\n    function _getOrDeployCollectNFT(\\n        uint256 publicationCollectedProfileId,\\n        uint256 publicationCollectedId,\\n        address collectNFTImpl\\n    ) private returns (address) {\\n        address collectNFT = _collectNFTByPub[publicationCollectedProfileId][\\n            publicationCollectedId\\n        ];\\n        if (collectNFT == address(0)) {\\n            collectNFT = _deployCollectNFT(\\n                publicationCollectedProfileId,\\n                publicationCollectedId,\\n                collectNFTImpl\\n            );\\n            _collectNFTByPub[publicationCollectedProfileId][\\n                publicationCollectedId\\n            ] = collectNFT;\\n        }\\n        return collectNFT;\\n    }\\n\\n    function getCollectNFT(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (address) {\\n        return _collectNFTByPub[profileId][pubId];\\n    }\\n\\n    /**\\n     *\\n     * @dev Process the collect by ensuring:\\n     *  1. Underlying publication's auction has finished.\\n     *  2. Parameters passed matches expected values (collector is the winner, correct referral info & no custom data).\\n     *  3. Publication has not been collected yet.\\n     * This function will also process collect fees if they have not been already processed through `processCollectFee`.\\n     */\\n    function claim(\\n        uint256 collectedProfileId,\\n        uint256 collectedPubId\\n    ) external {\\n        if (\\n            block.timestamp <\\n            _auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n                .availableSinceTimestamp\\n        ) {\\n            revert UnavailableAuction();\\n        }\\n        if (\\n            _auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n                .startTimestamp ==\\n            0 ||\\n            block.timestamp <=\\n            _auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n                .endTimestamp\\n        ) {\\n            revert OngoingAuction();\\n        }\\n        if (\\n            _auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n                .collected\\n        ) {\\n            revert CollectAlreadyProcessed();\\n        }\\n\\n        uint256 winnerProfileId = _auctionDataByPubByProfile[\\n            collectedProfileId\\n        ][collectedPubId].winnerProfileId;\\n        address winnerAddress = IERC721(PROFILE_NFT).ownerOf(winnerProfileId);\\n\\n        address collectNFT = _getOrDeployCollectNFT({\\n            publicationCollectedProfileId: collectedProfileId,\\n            publicationCollectedId: collectedPubId,\\n            collectNFTImpl: COLLECT_NFT_IMPL\\n        });\\n\\n        uint256 tokenId = ICustomCollectNFT(collectNFT).mint(winnerAddress);\\n\\n        _auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n            .collected = true;\\n        if (\\n            !_auctionDataByPubByProfile[collectedProfileId][collectedPubId]\\n                .feeProcessed\\n        ) {\\n            _processCollectFee(collectedProfileId, collectedPubId);\\n        }\\n\\n        emit Collected({\\n            collectedProfileId: collectedProfileId,\\n            collectedPubId: collectedPubId,\\n            collectorProfileId: winnerProfileId,\\n            nftRecipient: winnerAddress,\\n            collectNFT: collectNFT,\\n            tokenId: tokenId,\\n            timestamp: block.timestamp\\n        });\\n    }\\n\\n    /**\\n     * @notice Initializes the auction struct for the given publication.\\n     *\\n     * @dev Auction initialization logic moved to this function to avoid stack too deep error.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     * @param initData The auction initialization data.\\n     */\\n    function _initAuction(\\n        uint256 profileId,\\n        uint256 pubId,\\n        InitAuctionData memory initData\\n    ) internal {\\n        AuctionData storage auction = _auctionDataByPubByProfile[profileId][\\n            pubId\\n        ];\\n        auction.availableSinceTimestamp = initData.availableSinceTimestamp;\\n        auction.duration = initData.duration;\\n        auction.minTimeAfterBid = initData.minTimeAfterBid;\\n        auction.reservePrice = initData.reservePrice;\\n        auction.minBidIncrement = initData.minBidIncrement;\\n        auction.referralFee = initData.referralFee;\\n        auction.currency = initData.currency;\\n        auction.onlyFollowers = initData.onlyFollowers;\\n        auction.tokenData = TokenData(\\n            initData.tokenName,\\n            initData.tokenSymbol,\\n            initData.tokenRoyalty\\n        );\\n\\n        emit AuctionCreated(\\n            profileId,\\n            pubId,\\n            initData.availableSinceTimestamp,\\n            initData.duration,\\n            initData.minTimeAfterBid,\\n            initData.reservePrice,\\n            initData.minBidIncrement,\\n            initData.referralFee,\\n            initData.currency,\\n            initData.recipients,\\n            initData.onlyFollowers,\\n            initData.tokenName,\\n            initData.tokenSymbol,\\n            initData.tokenRoyalty\\n        );\\n    }\\n\\n    function _verifyErc20Currency(address currency) internal {\\n        if (currency != address(0)) {\\n            MODULE_REGISTRY.verifyErc20Currency(currency);\\n        }\\n    }\\n\\n    function _treasuryData() internal view returns (address, uint16) {\\n        return ILensGovernable(TREASURY).getTreasuryData();\\n    }\\n\\n    /**\\n     * @notice Process the fees from the given publication's underlying auction.\\n     *\\n     * @dev It delegates the fee processing to `_processCollectFeeWithoutReferral` or `_processCollectFeeWithReferral`\\n     * depending if has referrer or not.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     */\\n    function _processCollectFee(uint256 profileId, uint256 pubId) internal {\\n        _auctionDataByPubByProfile[profileId][pubId].feeProcessed = true;\\n        uint256[] storage referrerProfileIds = _referrerProfileIdByPubByProfile[\\n            profileId\\n        ][pubId][_auctionDataByPubByProfile[profileId][pubId].winnerProfileId];\\n\\n        RecipientData[] memory recipients = _recipientsByPublicationByProfile[\\n            profileId\\n        ][pubId];\\n        if (\\n            referrerProfileIds.length == 0 || referrerProfileIds[0] == profileId\\n        ) {\\n            _processCollectFeeWithoutReferral(\\n                _auctionDataByPubByProfile[profileId][pubId].winningBid,\\n                _auctionDataByPubByProfile[profileId][pubId].currency,\\n                recipients\\n            );\\n        } else {\\n            _processCollectFeeWithReferral(\\n                _auctionDataByPubByProfile[profileId][pubId].winningBid,\\n                _auctionDataByPubByProfile[profileId][pubId].referralFee,\\n                referrerProfileIds,\\n                _auctionDataByPubByProfile[profileId][pubId].currency,\\n                recipients\\n            );\\n        }\\n        emit FeeProcessed(profileId, pubId, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Process the fees sending the winner amount to the recipient.\\n     *\\n     * @param winnerBid The amount of the winner bid.\\n     * @param currency The currency in which the bids are denominated.\\n     * @param recipients The recipients of the auction's winner bid amount.\\n     */\\n    function _processCollectFeeWithoutReferral(\\n        uint256 winnerBid,\\n        address currency,\\n        RecipientData[] memory recipients\\n    ) internal {\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n\\n        uint256 treasuryAmount = (winnerBid * treasuryFee) / BPS_MAX;\\n        uint256 adjustedAmount = winnerBid - treasuryAmount;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransfer(treasury, treasuryAmount);\\n        }\\n\\n        uint256 len = recipients.length;\\n\\n        uint256 i;\\n        while (i < len) {\\n            uint256 amountForRecipient = (adjustedAmount *\\n                recipients[i].split) / BPS_MAX;\\n            if (amountForRecipient != 0)\\n                IERC20(currency).safeTransfer(\\n                    recipients[i].recipient,\\n                    amountForRecipient\\n                );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Process the fees sending the winner amount to the recipient and the corresponding referral fee to the\\n     * owner of the referrer profile.\\n     *\\n     * @param winnerBid The amount of the winner bid.\\n     * @param referralFee The percentage of the fee that will be transferred to the referrer in case of having one.\\n     * Measured in basis points, each basis point represents 0.01%.\\n     * @param referrerProfileIds The token IDs of the referrers' profiles.\\n     * @param currency The currency in which the bids are denominated.\\n     * @param recipients The recipient of the auction's winner bid amount.\\n     */\\n    function _processCollectFeeWithReferral(\\n        uint256 winnerBid,\\n        uint16 referralFee,\\n        uint256[] storage referrerProfileIds,\\n        address currency,\\n        RecipientData[] memory recipients\\n    ) internal {\\n        (address treasury, uint16 treasuryFee) = _treasuryData();\\n        uint256 treasuryAmount = (winnerBid * treasuryFee) / BPS_MAX;\\n        uint256 adjustedAmount = winnerBid - treasuryAmount;\\n\\n        if (treasuryAmount > 0) {\\n            IERC20(currency).safeTransfer(treasury, treasuryAmount);\\n        }\\n\\n        uint256 totalReferralsAmount;\\n        if (referralFee > 0) {\\n            // The reason we levy the referral fee on the adjusted amount is so that referral fees\\n            // don't bypass the treasury fee, in essence referrals pay their fair share to the treasury.\\n            totalReferralsAmount = (adjustedAmount * referralFee) / BPS_MAX;\\n            uint256 numberOfReferrals = referrerProfileIds.length;\\n            uint256 amountPerReferral = totalReferralsAmount /\\n                numberOfReferrals;\\n            if (amountPerReferral > 0) {\\n                uint256 i;\\n                while (i < numberOfReferrals) {\\n                    address referralRecipient = IERC721(PROFILE_NFT).ownerOf(\\n                        referrerProfileIds[i]\\n                    );\\n\\n                    // Send referral fee in ERC20 tokens\\n                    IERC20(currency).safeTransfer(\\n                        referralRecipient,\\n                        amountPerReferral\\n                    );\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n\\n        adjustedAmount -= totalReferralsAmount;\\n\\n        uint256 len = recipients.length;\\n\\n        uint256 j;\\n        while (j < len) {\\n            uint256 amountForRecipient = (adjustedAmount *\\n                recipients[j].split) / BPS_MAX;\\n            if (amountForRecipient != 0)\\n                IERC20(currency).safeTransfer(\\n                    recipients[j].recipient,\\n                    amountForRecipient\\n                );\\n            unchecked {\\n                ++j;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes the given bid for the given auction. Each new successful bid transfers back the funds of the\\n     * previous winner and pulls funds from the new winning bidder.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     * @param referrerProfileIds The token IDs of the referrers' profiles.\\n     * @param amount The bid amount to offer.\\n     * @param bidderOwner The owner's address of the bidder profile.\\n     * @param bidderProfileId The token ID of the bidder profile\\n     * @param bidderTransactionExecutor The address executing the bid\\n     */\\n    function _bid(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256[] memory referrerProfileIds,\\n        uint256 amount,\\n        address bidderOwner,\\n        uint256 bidderProfileId,\\n        address bidderTransactionExecutor\\n    ) internal {\\n        AuctionData memory auction = _auctionDataByPubByProfile[profileId][\\n            pubId\\n        ];\\n        _validateBid(profileId, amount, bidderProfileId, auction);\\n        _setReferrerProfileIdIfNotAlreadySet(\\n            profileId,\\n            pubId,\\n            referrerProfileIds,\\n            bidderProfileId\\n        );\\n        uint256 endTimestamp = _setNewAuctionStorageStateAfterBid(\\n            profileId,\\n            pubId,\\n            amount,\\n            bidderProfileId,\\n            auction\\n        );\\n        IERC20(auction.currency).safeTransferFrom(\\n            bidderTransactionExecutor,\\n            address(this),\\n            amount\\n        );\\n        emit BidPlaced(\\n            profileId,\\n            pubId,\\n            _referrerProfileIdByPubByProfile[profileId][pubId][bidderProfileId],\\n            amount,\\n            bidderOwner,\\n            bidderProfileId,\\n            bidderTransactionExecutor,\\n            endTimestamp,\\n            block.timestamp\\n        );\\n    }\\n\\n    function validateIsFollowingOrSelf(\\n        uint256 followerProfileId,\\n        uint256 followedProfileId\\n    ) private view {\\n        // We treat following yourself is always true\\n        if (followerProfileId == followedProfileId) {\\n            return;\\n        }\\n        if (\\n            !ILensProtocol(LENS_PROTOCOL).isFollowing(\\n                followerProfileId,\\n                followedProfileId\\n            )\\n        ) {\\n            revert Errors.NotFollowing();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates if the given bid is valid for the given auction.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param amount The bid amount to offer.\\n     * @param bidderProfileId The token ID of the bidder profile.\\n     * @param auction The data of the auction where the bid is being placed.\\n     */\\n    function _validateBid(\\n        uint256 profileId,\\n        uint256 amount,\\n        uint256 bidderProfileId,\\n        AuctionData memory auction\\n    ) internal view {\\n        if (\\n            auction.duration == 0 ||\\n            block.timestamp < auction.availableSinceTimestamp ||\\n            (auction.startTimestamp > 0 &&\\n                block.timestamp > auction.endTimestamp)\\n        ) {\\n            revert UnavailableAuction();\\n        }\\n\\n        _validateBidAmount(auction, amount);\\n\\n        if (auction.onlyFollowers) {\\n            validateIsFollowingOrSelf(bidderProfileId, profileId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the state of the auction data after a successful bid.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     * @param newWinningBid The amount of the new winning bid.\\n     * @param newWinnerProfileId The new winning bidder.\\n     * @param prevAuctionState The state of the auction data before the bid, which will be overrided.\\n     *\\n     * @return A UNIX timestamp representing the `endTimestamp` of the new auction state.\\n     */\\n    function _setNewAuctionStorageStateAfterBid(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 newWinningBid,\\n        uint256 newWinnerProfileId,\\n        AuctionData memory prevAuctionState\\n    ) internal returns (uint256) {\\n        AuctionData storage nextAuctionState = _auctionDataByPubByProfile[\\n            profileId\\n        ][pubId];\\n        nextAuctionState.winnerProfileId = newWinnerProfileId;\\n        nextAuctionState.winningBid = newWinningBid;\\n        uint256 endTimestamp = prevAuctionState.endTimestamp;\\n        if (prevAuctionState.winnerProfileId == 0) {\\n            endTimestamp = block.timestamp + prevAuctionState.duration;\\n            nextAuctionState.endTimestamp = uint64(endTimestamp);\\n            nextAuctionState.startTimestamp = uint64(block.timestamp);\\n        } else if (\\n            endTimestamp - block.timestamp < prevAuctionState.minTimeAfterBid\\n        ) {\\n            endTimestamp = block.timestamp + prevAuctionState.minTimeAfterBid;\\n            nextAuctionState.endTimestamp = uint64(endTimestamp);\\n        }\\n        return endTimestamp;\\n    }\\n\\n    /**\\n     * @notice Sets the the given `referrerProfileId` if it is the first bid of the bidder, or returns the previously\\n     * set otherwise.\\n     *\\n     * @param profileId The token ID of the profile associated with the underlying publication.\\n     * @param pubId The publication ID associated with the underlying publication.\\n     * @param referrerProfileIds The token IDs of the referrers' profiles.\\n     * @param bidderProfileId The profile ID of the bidder whose referrer profile id is being set.\\n     */\\n    function _setReferrerProfileIdIfNotAlreadySet(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256[] memory referrerProfileIds,\\n        uint256 bidderProfileId\\n    ) internal {\\n        uint256[]\\n            storage referrerProfileIdsSet = _referrerProfileIdByPubByProfile[\\n                profileId\\n            ][pubId][bidderProfileId];\\n        if (\\n            referrerProfileIdsSet.length == 0 || referrerProfileIdsSet[0] == 0\\n        ) {\\n            _referrerProfileIdByPubByProfile[profileId][pubId][\\n                bidderProfileId\\n            ] = referrerProfileIds;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the given bid amount is valid for the given auction.\\n     *\\n     * @param auction The auction where the bid amount validation should be performed.\\n     * @param amount The bid amount to validate.\\n     */\\n    function _validateBidAmount(\\n        AuctionData memory auction,\\n        uint256 amount\\n    ) internal pure {\\n        bool auctionStartsWithCurrentBid = auction.winnerProfileId == 0;\\n        if (\\n            (auctionStartsWithCurrentBid && amount < auction.reservePrice) ||\\n            (!auctionStartsWithCurrentBid &&\\n                (amount <= auction.winningBid ||\\n                    (auction.minBidIncrement > 0 &&\\n                        amount - auction.winningBid < auction.minBidIncrement)))\\n        ) {\\n            revert InsufficientBidAmount();\\n        }\\n    }\\n\\n    function _validateAndStoreRecipients(\\n        RecipientData[] memory recipients,\\n        uint256 profileId,\\n        uint256 pubId\\n    ) internal {\\n        uint256 len = recipients.length;\\n\\n        // Check number of recipients is supported min 1 max 5\\n        if (len < 1) {\\n            revert Errors.InitParamsInvalid();\\n        }\\n\\n        if (len > 5) {\\n            revert TooManyRecipients();\\n        }\\n\\n        // Check recipient splits sum to 10 000 BPS (100%)\\n        uint256 totalSplits;\\n        uint256 i;\\n        while (i < len) {\\n            if (recipients[i].split == 0) revert RecipientSplitCannotBeZero();\\n            totalSplits += recipients[i].split;\\n            _recipientsByPublicationByProfile[profileId][pubId].push(\\n                recipients[i]\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (totalSplits != BPS_MAX) {\\n            revert InvalidRecipientSplits();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f2a4f256d70039eff75d7d9cc90255fbb41f475becfb9e02dbf479a3e69812c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICustomCollectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ICollectNFT\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the CollectNFT contract. Which is cloned upon the first collect for any given\\n * publication.\\n */\\ninterface ICustomCollectNFT {\\n    /**\\n     * @notice Initializes the collect NFT, setting the feed as the privileged minter, storing the collected publication pointer\\n     * and initializing the name and symbol in the LensNFTBase contract.\\n     * @custom:permissions CollectPublicationAction.\\n     *\\n     * @param profileId The token ID of the profile in the hub that this Collect NFT points to.\\n     * @param pubId The profile publication ID in the hub that this Collect NFT points to.\\n     * @param tokenName The name of the token.\\n     * @param tokenSymbol The symbol of the token.\\n     * @param royalty The royalty percentage.\\n     */\\n    function initialize(\\n        uint256 profileId,\\n        uint256 pubId,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint16 royalty\\n    ) external;\\n\\n    /**\\n     * @notice Mints a collect NFT to the specified address. This can only be called by the hub and is called\\n     * upon collection.\\n     * @custom:permissions CollectPublicationAction.\\n     *\\n     * @param to The address to mint the NFT to.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the source publication of this collect NFT.\\n     *\\n     * @return tuple First is the profile ID, and second is the publication ID.\\n     */\\n    function getSourcePublicationPointer()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x391e760789ad453c18fd8e44d29b3f576da4dfe2426614bcab36e90334ef32d9\",\"license\":\"MIT\"},\"lens-modules/contracts/base/HubRestricted.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport {Errors} from '../libraries/constants/Errors.sol';\\n\\n/**\\n * @title HubRestricted\\n * @author Lens Protocol\\n *\\n * @notice This abstract contract adds a public `HUB` immutable field, as well as an `onlyHub` modifier,\\n * to inherit from contracts that have functions restricted to be only called by the Lens hub.\\n */\\nabstract contract HubRestricted {\\n    address public immutable HUB;\\n\\n    modifier onlyHub() {\\n        if (msg.sender != HUB) {\\n            revert Errors.NotHub();\\n        }\\n        _;\\n    }\\n\\n    constructor(address hub) {\\n        HUB = hub;\\n    }\\n}\\n\",\"keccak256\":\"0x474191acbdce986029c236a30024aa40a7fda3774a70f40ea35195f4cf77ccc1\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensGovernable\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the Lens Protocol main governance functions.\\n */\\ninterface ILensGovernable {\\n    /**\\n     * @notice Sets the privileged governance role.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state.\\n     * @custom:permissions Governance.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state.\\n     * @custom:permissions Governance or Emergency Admin. Emergency Admin can only restrict more.\\n     *\\n     * @param newState The state to set. It can be one of the following:\\n     *  - Unpaused: The protocol is fully operational.\\n     *  - PublishingPaused: The protocol is paused for publishing, but it is still operational for others operations.\\n     *  - Paused: The protocol is paused for all operations.\\n     */\\n    function setState(Types.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\\n\\n    /**\\n     * @notice Sets the profile token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param profileTokenURIContract The profile token URI contract to set.\\n     */\\n    function setProfileTokenURIContract(address profileTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the follow token URI contract.\\n     * @custom:permissions Governance.\\n     *\\n     * @param followTokenURIContract The follow token URI contract to set.\\n     */\\n    function setFollowTokenURIContract(address followTokenURIContract) external;\\n\\n    /**\\n     * @notice Sets the treasury address.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasury The new treasury address to set.\\n     */\\n    function setTreasury(address newTreasury) external;\\n\\n    /**\\n     * @notice Sets the treasury fee.\\n     * @custom:permissions Governance\\n     *\\n     * @param newTreasuryFee The new treasury fee to set.\\n     */\\n    function setTreasuryFee(uint16 newTreasuryFee) external;\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Gets the state currently set in the protocol. It could be a global pause, a publishing pause or an\\n     * unpaused state.\\n     * @custom:permissions Anyone.\\n     *\\n     * @return Types.ProtocolState The state currently set in the protocol.\\n     */\\n    function getState() external view returns (Types.ProtocolState);\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the treasury address.\\n     *\\n     * @return address The treasury address.\\n     */\\n    function getTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the treasury fee.\\n     *\\n     * @return uint16 The treasury fee.\\n     */\\n    function getTreasuryFee() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the treasury address and treasury fee in a single call.\\n     *\\n     * @return tuple First, the treasury address, second, the treasury fee.\\n     */\\n    function getTreasuryData() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Gets the profile token URI contract.\\n     *\\n     * @return address The profile token URI contract.\\n     */\\n    function getProfileTokenURIContract() external view returns (address);\\n\\n    /**\\n     * @notice Gets the follow token URI contract.\\n     *\\n     * @return address The follow token URI contract.\\n     */\\n    function getFollowTokenURIContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4fb99da977c479cbd417768ad4c3ad052446e7a8fcba4f3621d5dc631d19acda\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/ILensProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title ILensProtocol\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for Lens Protocol's core functions. It contains all the entry points for performing\\n * social operations.\\n */\\ninterface ILensProtocol {\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a Profile NFT to the given recipient.\\n     * @custom:permissions Any whitelisted profile creator.\\n     *\\n     * @param createProfileParams A CreateProfileParams struct containing the needed params.\\n     */\\n    function createProfile(Types.CreateProfileParams calldata createProfileParams) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the metadata URI for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the metadata URI for.\\n     * @param metadataURI The metadata URI to set for the given profile.\\n     */\\n    function setProfileMetadataURI(uint256 profileId, string calldata metadataURI) external;\\n\\n    /**\\n     * @custom:meta-tx setProfileMetadataURI.\\n     */\\n    function setProfileMetadataURIWithSig(\\n        uint256 profileId,\\n        string calldata metadataURI,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the follow module for the given profile.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(uint256 profileId, address followModule, bytes calldata followModuleInitData) external;\\n\\n    /**\\n     * @custom:meta-tx setFollowModule.\\n     */\\n    function setFollowModuleWithSig(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile. It allows setting the approvals for\\n     * delegated executors in the specified configuration, as well as switching to it.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     * @param configNumber The number of the configuration where the executor approval state is being set.\\n     * @param switchToGivenConfig A boolean indicating if the configuration must be switched to the one with the given\\n     * number.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig\\n    ) external;\\n\\n    /**\\n     * @notice Changes the delegated executors configuration for the given profile under the current configuration.\\n     * @custom:permissions Profile Owner.\\n     *\\n     * @param delegatorProfileId The ID of the profile to which the delegated executor is being changed for.\\n     * @param delegatedExecutors The array of delegated executors to set the approval for.\\n     * @param approvals The array of booleans indicating the corresponding executor's new approval status.\\n     */\\n    function changeDelegatedExecutorsConfig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx changeDelegatedExecutorsConfig.\\n     */\\n    function changeDelegatedExecutorsConfigWithSig(\\n        uint256 delegatorProfileId,\\n        address[] calldata delegatedExecutors,\\n        bool[] calldata approvals,\\n        uint64 configNumber,\\n        bool switchToGivenConfig,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post.\\n     * Post is the most basic publication type, and can be used to publish any kind of content.\\n     * Posts can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this post (e.g. token-gated comments)\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param postParams A PostParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(Types.PostParams calldata postParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx post.\\n     */\\n    function postWithSig(\\n        Types.PostParams calldata postParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment on the given publication.\\n     * Comment is a type of reference publication that points to another publication.\\n     * Comments can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this comment (e.g. token-gated mirrors)\\n     * Comments can have referrers (e.g. publications or profiles that helped to discover the pointed publication).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param commentParams A CommentParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(Types.CommentParams calldata commentParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx comment.\\n     */\\n    function commentWithSig(\\n        Types.CommentParams calldata commentParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror of the given publication.\\n     * Mirror is a type of reference publication that points to another publication but doesn't have content.\\n     * Mirrors don't have any modules initialized.\\n     * Mirrors can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * You cannot mirror a mirror, comment on a mirror, or quote a mirror.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param mirrorParams A MirrorParams struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(Types.MirrorParams calldata mirrorParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx mirror.\\n     */\\n    function mirrorWithSig(\\n        Types.MirrorParams calldata mirrorParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a quote of the given publication.\\n     * Quote is a type of reference publication similar to mirror, but it has content and modules.\\n     * Quotes can have these types of modules initialized:\\n     *  - Action modules: any number of publication actions (e.g. collect, tip, etc.)\\n     *  - Reference module: a module handling the rules when referencing this quote (e.g. token-gated comments on quote)\\n     * Quotes can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * Unlike mirrors, you can mirror a quote, comment on a quote, or quote a quote.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param quoteParams A QuoteParams struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the quote's publication ID.\\n     */\\n    function quote(Types.QuoteParams calldata quoteParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx quote.\\n     */\\n    function quoteWithSig(\\n        Types.QuoteParams calldata quoteParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Follows given profiles, executing each profile's follow module logic (if any).\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToFollow`, `followTokenIds`, and `datas` arrays must be of the same length,\\n     * regardless if the profiles do not have a follow module set.\\n     *\\n     * @param followerProfileId The ID of the profile the follows are being executed for.\\n     * @param idsOfProfilesToFollow The array of IDs of profiles to follow.\\n     * @param followTokenIds The array of follow token IDs to use for each follow (0 if you don't own a follow token).\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of follow token IDs representing the follow tokens created for each follow.\\n     */\\n    function follow(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @custom:meta-tx follow.\\n     */\\n    function followWithSig(\\n        uint256 followerProfileId,\\n        uint256[] calldata idsOfProfilesToFollow,\\n        uint256[] calldata followTokenIds,\\n        bytes[] calldata datas,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Unfollows given profiles.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @param unfollowerProfileId The ID of the profile the unfollows are being executed for.\\n     * @param idsOfProfilesToUnfollow The array of IDs of profiles to unfollow.\\n     */\\n    function unfollow(uint256 unfollowerProfileId, uint256[] calldata idsOfProfilesToUnfollow) external;\\n\\n    /**\\n     * @custom:meta-tx unfollow.\\n     */\\n    function unfollowWithSig(\\n        uint256 unfollowerProfileId,\\n        uint256[] calldata idsOfProfilesToUnfollow,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the block status for the given profiles. Changing a profile's block status to `true` (i.e. blocked),\\n     * when will also force them to unfollow.\\n     * Blocked profiles cannot perform any actions with the profile that blocked them: they cannot comment or mirror\\n     * their publications, they cannot follow them, they cannot collect, tip them, etc.\\n     * @custom:permissions Profile Owner or Delegated Executor.\\n     *\\n     * @dev Both the `idsOfProfilesToSetBlockStatus` and `blockStatus` arrays must be of the same length.\\n     *\\n     * @param byProfileId The ID of the profile that is blocking/unblocking somebody.\\n     * @param idsOfProfilesToSetBlockStatus The array of IDs of profiles to set block status.\\n     * @param blockStatus The array of block statuses to use for each (true is blocked).\\n     */\\n    function setBlockStatus(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus\\n    ) external;\\n\\n    /**\\n     * @custom:meta-tx setBlockStatus.\\n     */\\n    function setBlockStatusWithSig(\\n        uint256 byProfileId,\\n        uint256[] calldata idsOfProfilesToSetBlockStatus,\\n        bool[] calldata blockStatus,\\n        Types.EIP712Signature calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     * Collect can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Collector Profile Owner or its Delegated Executor.\\n     * @custom:pending-deprecation Collect modules were replaced by PublicationAction Collect modules in V2. This method\\n     * is left here for backwards compatibility with posts made in V1 that had Collect modules.\\n     *\\n     * @param collectParams A CollectParams struct containing the parameters.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectLegacy(Types.LegacyCollectParams calldata collectParams) external returns (uint256);\\n\\n    /**\\n     * @custom:meta-tx collect.\\n     * @custom:pending-deprecation\\n     */\\n    function collectLegacyWithSig(\\n        Types.LegacyCollectParams calldata collectParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Acts on a given publication with the specified parameters.\\n     * You can act on a publication except a mirror (if it has at least one action module initialized).\\n     * Actions can have referrers (e.g. publications or profiles that allowed to discover the pointed publication).\\n     * @custom:permissions Actor Profile Owner or its Delegated Executor.\\n     *\\n     * @param publicationActionParams A PublicationActionParams struct containing the parameters.\\n     *\\n     * @return bytes Arbitrary data the action module returns.\\n     */\\n    function act(Types.PublicationActionParams calldata publicationActionParams) external returns (bytes memory);\\n\\n    /**\\n     * @custom:meta-tx act.\\n     */\\n    function actWithSig(\\n        Types.PublicationActionParams calldata publicationActionParams,\\n        Types.EIP712Signature calldata signature\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @dev This function is used to invalidate signatures by incrementing the nonce of the signer.\\n     * @param increment The amount to increment the nonce by (max 255).\\n     */\\n    function incrementNonce(uint8 increment) external;\\n\\n    /////////////////////////////////\\n    ///       VIEW FUNCTIONS      ///\\n    /////////////////////////////////\\n\\n    /**\\n     * @notice Returns whether or not `followerProfileId` is following `followedProfileId`.\\n     *\\n     * @param followerProfileId The ID of the profile whose following state should be queried.\\n     * @param followedProfileId The ID of the profile whose followed state should be queried.\\n     *\\n     * @return bool True if `followerProfileId` is following `followedProfileId`, false otherwise.\\n     */\\n    function isFollowing(uint256 followerProfileId, uint256 followedProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the configuration with the given\\n     * number, to act on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     * @param configNumber The number of the configuration where the executor approval state is being queried.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * given configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor,\\n        uint64 configNumber\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the given address is approved as delegated executor, in the current configuration, to act\\n     * on behalf of the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile to check the delegated executor approval for.\\n     * @param delegatedExecutor The address to query the delegated executor approval for.\\n     *\\n     * @return bool True if the address is approved as a delegated executor to act on behalf of the profile in the\\n     * current configuration, false otherwise.\\n     */\\n    function isDelegatedExecutorApproved(\\n        uint256 delegatorProfileId,\\n        address delegatedExecutor\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the current delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors config number is being queried\\n     *\\n     * @return uint256 The current delegated executor configuration number.\\n     */\\n    function getDelegatedExecutorsConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the previous used delegated executor config number for the given profile.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' previous configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor configuration number previously set. It will coincide with the current\\n     * configuration set if it was never switched from the default one.\\n     */\\n    function getDelegatedExecutorsPrevConfigNumber(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the maximum delegated executor config number for the given profile.\\n     * This is the maximum config number that was ever used by this profile.\\n     * When creating a new clean configuration, you can only use a number that is maxConfigNumber + 1.\\n     *\\n     * @param delegatorProfileId The ID of the profile from which the delegated executors' maximum configuration number\\n     * set is being queried.\\n     *\\n     * @return uint256 The delegated executor maximum configuration number set.\\n     */\\n    function getDelegatedExecutorsMaxConfigNumberSet(uint256 delegatorProfileId) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns whether `profileId` is blocked by `byProfileId`.\\n     * See setBlockStatus() for more information on how blocking works on the platform.\\n     *\\n     * @param profileId The ID of the profile whose blocked status should be queried.\\n     * @param byProfileId The ID of the profile whose blocker status should be queried.\\n     *\\n     * @return bool True if `profileId` is blocked by `byProfileId`, false otherwise.\\n     */\\n    function isBlocked(uint256 profileId, uint256 byProfileId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     * This is used to store the publication's metadata, e.g.: content, images, etc.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return Profile The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId) external view returns (Types.Profile memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return Publication The publication struct associated with the queried publication.\\n     */\\n    function getPublication(uint256 profileId, uint256 pubId) external view returns (Types.PublicationMemory memory);\\n\\n    /**\\n     * @notice Returns the type of a given publication.\\n     * The type can be one of the following (see PublicationType enum):\\n     * - Nonexistent\\n     * - Post\\n     * - Comment\\n     * - Mirror\\n     * - Quote\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationType The publication type of the queried publication.\\n     */\\n    function getPublicationType(uint256 profileId, uint256 pubId) external view returns (Types.PublicationType);\\n\\n    /**\\n     * @notice Returns wether a given Action Module is enabled for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     * @param module The address of the Action Module to query.\\n     *\\n     * @return bool True if the Action Module is enabled for the queried publication, false if not.\\n     */\\n    function isActionModuleEnabledInPublication(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address module\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1960db7eb00db58fa1ece3aa4a668dd60285c04cba4d4e1937f1fe25980d480c\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IModuleRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IModuleRegistry {\\n    enum ModuleType {\\n        __, // Just to avoid 0 as valid ModuleType\\n        PUBLICATION_ACTION_MODULE,\\n        REFERENCE_MODULE,\\n        FOLLOW_MODULE\\n    }\\n\\n    // Modules functions\\n\\n    function verifyModule(address moduleAddress, uint256 moduleType) external returns (bool);\\n\\n    function registerModule(address moduleAddress, uint256 moduleType) external returns (bool);\\n\\n    function getModuleTypes(address moduleAddress) external view returns (uint256);\\n\\n    function isModuleRegistered(address moduleAddress) external view returns (bool);\\n\\n    function isModuleRegisteredAs(address moduleAddress, uint256 moduleType) external view returns (bool);\\n\\n    // Currencies functions\\n\\n    function verifyErc20Currency(address currencyAddress) external returns (bool);\\n\\n    function registerErc20Currency(address currencyAddress) external returns (bool);\\n\\n    function isErc20CurrencyRegistered(address currencyAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf5a583c97e3ad53e24ca137daf7adcc1437460621ccdbbb466da20e5a9af7d16\",\"license\":\"MIT\"},\"lens-modules/contracts/interfaces/IPublicationActionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport {Types} from '../libraries/constants/Types.sol';\\n\\n/**\\n * @title IPublicationAction\\n * @author Lens Protocol\\n *\\n * @notice This is the standard interface for all Lens-compatible Publication Actions.\\n * Publication action modules allow users to execute actions directly from a publication, like:\\n *  - Minting NFTs.\\n *  - Collecting a publication.\\n *  - Sending funds to the publication author (e.g. tipping).\\n *  - Etc.\\n * Referrers are supported, so any publication or profile that references the publication can receive a share from the\\n * publication's action if the action module supports it.\\n */\\ninterface IPublicationActionModule {\\n    /**\\n     * @notice Initializes the action module for the given publication being published with this Action module.\\n     * @custom:permissions LensHub.\\n     *\\n     * @param profileId The profile ID of the author publishing the content with this Publication Action.\\n     * @param pubId The publication ID being published.\\n     * @param transactionExecutor The address of the transaction executor (e.g. for any funds to transferFrom).\\n     * @param data Arbitrary data passed from the user to be decoded by the Action Module during initialization.\\n     *\\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\\n     * indexers or UIs.\\n     */\\n    function initializePublicationAction(\\n        uint256 profileId,\\n        uint256 pubId,\\n        address transactionExecutor,\\n        bytes calldata data\\n    ) external returns (bytes memory);\\n\\n    /**\\n     * @notice Processes the action for a given publication. This includes the action's logic and any monetary/token\\n     * operations.\\n     * @custom:permissions LensHub.\\n     *\\n     * @param processActionParams The parameters needed to execute the publication action.\\n     *\\n     * @return bytes Any custom ABI-encoded data. This will be a LensHub event params that can be used by\\n     * indexers or UIs.\\n     */\\n    function processPublicationAction(Types.ProcessActionParams calldata processActionParams)\\n        external\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x05b33380910ce1e79dcc4ac5e550591b7ce2d693c8e8782a2fa0d1bb7cc17bc0\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary Errors {\\n    error CannotInitImplementation();\\n    error Initialized();\\n    error SignatureExpired();\\n    error SignatureInvalid();\\n    error InvalidOwner();\\n    error NotOwnerOrApproved();\\n    error NotHub();\\n    error TokenDoesNotExist();\\n    error NotGovernance();\\n    error NotGovernanceOrEmergencyAdmin();\\n    error EmergencyAdminCanOnlyPauseFurther();\\n    error NotProfileOwner();\\n    error PublicationDoesNotExist();\\n    error CallerNotFollowNFT();\\n    error CallerNotCollectNFT(); // Legacy\\n    error ArrayMismatch();\\n    error NotWhitelisted();\\n    error NotRegistered();\\n    error InvalidParameter();\\n    error ExecutorInvalid();\\n    error Blocked();\\n    error SelfBlock();\\n    error NotFollowing();\\n    error SelfFollow();\\n    error InvalidReferrer();\\n    error InvalidPointedPub();\\n    error NonERC721ReceiverImplementer();\\n    error AlreadyEnabled();\\n\\n    // Module Errors\\n    error InitParamsInvalid();\\n    error ActionNotAllowed();\\n\\n    error CollectNotAllowed(); // Used in LegacyCollectLib (pending deprecation)\\n\\n    // MultiState Errors\\n    error Paused();\\n    error PublishingPaused();\\n\\n    // Profile Guardian Errors\\n    error GuardianEnabled();\\n    error NotEOA();\\n    error DisablingAlreadyTriggered();\\n\\n    // Migration Errors\\n    error NotMigrationAdmin();\\n}\\n\",\"keccak256\":\"0x3bce382447150a8b2c7213bea5f4dd2cf210b315d45e1d0984c96bf8d610d175\",\"license\":\"MIT\"},\"lens-modules/contracts/libraries/constants/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title Types\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary Types {\\n    /**\\n     * @notice ERC721Timestamped storage. Contains the owner address and the mint timestamp for every NFT.\\n     *\\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\\n     * _tokenData mapping, alongside the mint timestamp.\\n     *\\n     * @param owner The token owner.\\n     * @param mintTimestamp The mint timestamp.\\n     */\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice A struct containing token follow-related data.\\n     *\\n     * @param followerProfileId The ID of the profile using the token to follow.\\n     * @param originalFollowTimestamp The timestamp of the first follow performed with the token.\\n     * @param followTimestamp The timestamp of the current follow, if a profile is using the token to follow.\\n     * @param profileIdAllowedToRecover The ID of the profile allowed to recover the follow ID, if any.\\n     */\\n    struct FollowData {\\n        uint160 followerProfileId;\\n        uint48 originalFollowTimestamp;\\n        uint48 followTimestamp;\\n        uint256 profileIdAllowedToRecover;\\n    }\\n\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     * @param Post A standard post, having an URI, action modules and no pointer to another publication.\\n     * @param Comment A comment, having an URI, action modules and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or action modules.\\n     * @param Quote A quote, having an URI, action modules, and a pointer to another publication.\\n     */\\n    enum PublicationType {\\n        Nonexistent,\\n        Post,\\n        Comment,\\n        Mirror,\\n        Quote\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param signer The address of the signer. Specially needed as a parameter to support EIP-1271.\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter.\\n     * @param deadline The signature's deadline.\\n     */\\n    struct EIP712Signature {\\n        address signer;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be address(0) in none.\\n     * @param followNFT The address of the followNFT associated with this profile. It can be address(0) if the\\n     * profile has not been followed yet, as the collection is lazy-deployed upon the first follow.\\n     * @param __DEPRECATED__handle DEPRECATED in V2: handle slot, was replaced with LensHandles.\\n     * @param __DEPRECATED__imageURI DEPRECATED in V2: The URI to be used for the profile image.\\n     * @param __DEPRECATED__followNFTURI DEPRECATED in V2: The URI used for the follow NFT image.\\n     * @param metadataURI MetadataURI is used to store the profile's metadata, for example: displayed name, description,\\n     * interests, etc.\\n     */\\n    struct Profile {\\n        uint256 pubCount; // offset 0\\n        address followModule; // offset 1\\n        address followNFT; // offset 2\\n        string __DEPRECATED__handle; // offset 3\\n        string __DEPRECATED__imageURI; // offset 4\\n        string __DEPRECATED__followNFTURI; // Deprecated in V2 as we have a common tokenURI for all Follows, offset 5\\n        string metadataURI; // offset 6\\n    }\\n\\n    /**\\n     * @notice A struct containing publication data.\\n     *\\n     * @param pointedProfileId The profile token ID to point the publication to.\\n     * @param pointedPubId The publication ID to point the publication to.\\n     * These are used to implement the \\\"reference\\\" feature of the platform and is used in:\\n     * - Mirrors\\n     * - Comments\\n     * - Quotes\\n     * There are (0,0) if the publication is not pointing to any other publication (i.e. the publication is a Post).\\n     * @param contentURI The URI to set for the content of publication (can be ipfs, arweave, http, etc).\\n     * @param referenceModule Reference module associated with this profile, if any.\\n     * @param __DEPRECATED__collectModule Collect module associated with this publication, if any. Deprecated in V2.\\n     * @param __DEPRECATED__collectNFT Collect NFT associated with this publication, if any. Deprecated in V2.\\n     * @param pubType The type of publication, can be Nonexistent, Post, Comment, Mirror or Quote.\\n     * @param rootProfileId The profile ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param rootPubId The publication ID of the root post (to determine if comments/quotes and mirrors come from it).\\n     * Posts, V1 publications and publications rooted in V1 publications don't have it set.\\n     * @param actionModuleEnabled The action modules enabled in a given publication.\\n     */\\n    struct Publication {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        mapping(address => bool) actionModuleEnabled;\\n    }\\n\\n    struct PublicationMemory {\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        string contentURI;\\n        address referenceModule;\\n        address __DEPRECATED__collectModule; // Deprecated in V2\\n        address __DEPRECATED__collectNFT; // Deprecated in V2\\n        // Added in Lens V2, so these will be zero for old publications:\\n        PublicationType pubType;\\n        uint256 rootProfileId;\\n        uint256 rootPubId;\\n        // bytes32 __ACTION_MODULE_ENABLED_MAPPING; // Mappings are not supported in memory.\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     */\\n    struct CreateProfileParams {\\n        address to;\\n        address followModule;\\n        bytes followModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostParams {\\n        uint256 profileId;\\n        string contentURI;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID to point the comment to.\\n     * @param pointedPubId The publication ID to point the comment to.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `quote()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is quoted.\\n     * @param pointedPubId The publication ID that is quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct QuoteParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` or `quote()` internal functions.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param pointedProfileId The profile token ID of the publication author that is commented on/quoted.\\n     * @param pointedPubId The publication ID that is commented on/quoted.\\n     * @param referrerProfileId The profile token ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referrerPubId The ID of the publication that referred to the publication being commented on/quoted.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param actionModules The action modules to set for this new publication.\\n     * @param actionModulesInitDatas The data to pass to the action modules' initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct ReferencePubParams {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n        address[] actionModules;\\n        bytes[] actionModulesInitDatas;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param metadataURI the URI containing metadata attributes to attach to this mirror publication.\\n     * @param pointedProfileId The profile token ID to point the mirror to.\\n     * @param pointedPubId The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     */\\n    struct MirrorParams {\\n        uint256 profileId;\\n        string metadataURI;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        bytes referenceModuleData;\\n    }\\n\\n    /**\\n     * Deprecated in V2: Will be removed after some time after upgrading to V2.\\n     * @notice A struct containing the parameters required for the legacy `collect()` function.\\n     * @dev The referrer can only be a mirror of the publication being collected.\\n     *\\n     * @param publicationCollectedProfileId The token ID of the profile that published the publication to collect.\\n     * @param publicationCollectedId The publication to collect's publication ID.\\n     * @param collectorProfileId The collector profile.\\n     * @param referrerProfileId The ID of a profile that authored a mirror that helped discovering the collected pub.\\n     * @param referrerPubId The ID of the mirror that helped discovering the collected pub.\\n     * @param collectModuleData The arbitrary data to pass to the collectModule if needed.\\n     */\\n    struct LegacyCollectParams {\\n        uint256 publicationCollectedProfileId;\\n        uint256 publicationCollectedId;\\n        uint256 collectorProfileId;\\n        uint256 referrerProfileId;\\n        uint256 referrerPubId;\\n        bytes collectModuleData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `action()` function.\\n     *\\n     * @param publicationActedProfileId The token ID of the profile that published the publication to action.\\n     * @param publicationActedId The publication to action's publication ID.\\n     * @param actorProfileId The actor profile.\\n     * @param referrerProfileId\\n     * @param referrerPubId\\n     * @param actionModuleAddress\\n     * @param actionModuleData The arbitrary data to pass to the actionModule if needed.\\n     */\\n    struct PublicationActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        address actionModuleAddress;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessActionParams {\\n        uint256 publicationActedProfileId;\\n        uint256 publicationActedId;\\n        uint256 actorProfileId;\\n        address actorProfileOwner;\\n        address transactionExecutor;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes actionModuleData;\\n    }\\n\\n    struct ProcessCommentParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessQuoteParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    struct ProcessMirrorParams {\\n        uint256 profileId;\\n        uint256 pubId;\\n        address transactionExecutor;\\n        uint256 pointedProfileId;\\n        uint256 pointedPubId;\\n        uint256[] referrerProfileIds;\\n        uint256[] referrerPubIds;\\n        Types.PublicationType[] referrerPubTypes;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice A struct containing a profile's delegated executors configuration.\\n     *\\n     * @param isApproved Tells when an address is approved as delegated executor in the given configuration number.\\n     * @param configNumber Current configuration number in use.\\n     * @param prevConfigNumber Previous configuration number set, before switching to the current one.\\n     * @param maxConfigNumberSet Maximum configuration number ever used.\\n     */\\n    struct DelegatedExecutorsConfig {\\n        mapping(uint256 => mapping(address => bool)) isApproved; // isApproved[configNumber][delegatedExecutor]\\n        uint64 configNumber;\\n        uint64 prevConfigNumber;\\n        uint64 maxConfigNumberSet;\\n    }\\n\\n    struct TreasuryData {\\n        address treasury;\\n        uint16 treasuryFeeBPS;\\n    }\\n\\n    struct MigrationParams {\\n        address lensHandlesAddress;\\n        address tokenHandleRegistryAddress;\\n        address legacyFeeFollowModule;\\n        address legacyProfileFollowModule;\\n        address newFeeFollowModule;\\n    }\\n}\\n\",\"keccak256\":\"0xffe0b820ba574fcfed3e5df59cede6c65f5e1da294c43c46ca9b87139775c885\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/LensModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {ILensModule} from './interfaces/ILensModule.sol';\\n\\nabstract contract LensModule is ILensModule {\\n    /// @inheritdoc ILensModule\\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\\n        return interfaceID == bytes4(keccak256(abi.encodePacked('LENS_MODULE')));\\n    }\\n}\\n\",\"keccak256\":\"0x2fae8afe2e476ebc1a1186bc0878133a69289c8a2a2b93736e83d698a10a65a6\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/LensModuleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {LensModule} from './LensModule.sol';\\n\\nabstract contract LensModuleMetadata is LensModule, Ownable {\\n    string private metadataURI;\\n\\n    function setModuleMetadataURI(string memory _metadataURI) external onlyOwner {\\n        metadataURI = _metadataURI;\\n    }\\n\\n    function getModuleMetadataURI() external view returns (string memory) {\\n        return metadataURI;\\n    }\\n}\\n\",\"keccak256\":\"0x3d8c2d6c124e261cc5b751edad530bd2520f9d80d41250583c69204ec6d9b3e9\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/base/LensModuleRegistrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IModuleRegistry} from \\\"../../interfaces/IModuleRegistry.sol\\\";\\nimport {Types} from \\\"../../libraries/constants/Types.sol\\\";\\n\\nimport {ILensModuleRegistrant} from \\\"../interfaces/IModuleRegistrant.sol\\\";\\n\\n/**\\n * @title LensModuleRegistrant\\n * @author Paul Burke\\n *\\n * @notice This abstract contract adds a public `MODULE_REGISTRY` immutable field, and provides functions\\n * for registering a module in the registry and checking if a module is registered.\\n */\\nabstract contract LensModuleRegistrant is ILensModuleRegistrant, Ownable {\\n    event ModuleRegistered();\\n\\n    IModuleRegistry public immutable MODULE_REGISTRY;\\n\\n    constructor(IModuleRegistry moduleRegistry) {\\n        MODULE_REGISTRY = moduleRegistry;\\n    }\\n\\n    /// @inheritdoc ILensModuleRegistrant\\n    function isRegistered() public view override returns (bool) {\\n        return MODULE_REGISTRY.isModuleRegistered(address(this));\\n    }\\n\\n    /// @inheritdoc ILensModuleRegistrant\\n    function registerModule() external override onlyOwner returns (bool) {\\n        if (isRegistered()) {\\n            return true;\\n        }\\n\\n        bool registered = MODULE_REGISTRY.registerModule(\\n            address(this),\\n            uint256(IModuleRegistry.ModuleType.PUBLICATION_ACTION_MODULE)\\n        );\\n\\n        if (registered) {\\n            emit ModuleRegistered();\\n        }\\n\\n        return registered;\\n    }\\n}\\n\",\"keccak256\":\"0xa037c00f3a38843c23e7e159b4ae000748fdf9bea5f66980a2f512a7d05df3c4\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/interfaces/ILensModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface ILensModule is IERC165 {\\n    /// @dev for now we check for keccak('LENS_MODULE');\\n    /// Override this and add the type(IModuleInterface).interfaceId for corresponding module type\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    /// @notice Human-readable description of the module\\n    // Can be JSON\\n    // Can be contract source code\\n    // Can be github link\\n    // Can be ipfs with documentation\\n    // etc\\n    function getModuleMetadataURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa359c950c9ad8de4b9f9a4b38eb40656c9ca64133f24df0627115ff6c1d215c0\",\"license\":\"MIT\"},\"lens-modules/contracts/modules/interfaces/IModuleRegistrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ILensModuleRegistrant\\n * @author Paul Burke\\n *\\n * @notice An interface for registering modules in the module registry\\n */\\ninterface ILensModuleRegistrant {\\n    /**\\n     * @dev Registers the open action in the module registry\\n     * @return True if the module was registered, false otherwise\\n     */\\n    function registerModule() external returns (bool);\\n\\n    /**\\n     * @dev Checks if the module is registered in the module registry\\n     * @return True if the module is registered, false otherwise\\n     */\\n    function isRegistered() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x454a771adc7053b9be23f6392ad0c53c558d223736dd932557a23f5c1a3ba6c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162003ae038038062003ae08339810160408190526200003591620000e4565b6001600160a01b038616608052816200004e336200007b565b6001600160a01b0390811660a05294851660e05292841661010052508216610120521660c0525062000178565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000e157600080fd5b50565b60008060008060008060c08789031215620000fe57600080fd5b86516200010b81620000cb565b60208801519096506200011e81620000cb565b60408801519095506200013181620000cb565b60608801519094506200014481620000cb565b60808801519093506200015781620000cb565b60a08801519092506200016a81620000cb565b809150509295509295509295565b60805160a05160c05160e05161010051610120516138e7620001f960003960006125ad015260008181610be70152612338015260006128d10152600081816101240152610c720152600081816102b60152818161052201528181610ee301526111f601526000818161028f015281816103e8015261089701526138e76000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c8063861ff101116100b2578063b95ddb5211610081578063ce90d52e11610066578063ce90d52e146102eb578063e0f0da85146102f3578063f2fde38b146102fb57600080fd5b8063b95ddb52146102b1578063c3490263146102d857600080fd5b8063861ff101146102395780638da5cb5b1461025957806390ce6e0814610277578063a4c52b861461028a57600080fd5b8063417f3c3d116100ee578063417f3c3d146101bb57806352aaef55146101db578063681591c11461021c578063715018a61461023157600080fd5b8062a7c89b1461011f57806301ffc9a7146101705780630b9602201461019357806322366844146101b3575b600080fd5b6101467f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61018361017e366004612b7c565b61030e565b6040519015158152602001610167565b6101a66101a1366004612be7565b6103ce565b6040516101679190612ceb565b6101836104f1565b6101ce6101c9366004612cfe565b6105a7565b6040516101679190612d20565b6101466101e9366004612cfe565b600091825260026020908152604080842092845291905290205473ffffffffffffffffffffffffffffffffffffffff1690565b61022f61022a366004612efa565b6107a7565b005b61022f6107bf565b61024c610247366004612cfe565b6107d3565b604051610167919061300e565b60005473ffffffffffffffffffffffffffffffffffffffff16610146565b6101a6610285366004613021565b61087d565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b61022f6102e6366004612cfe565b610a2d565b6101a6610dfc565b610183610e8e565b61022f61030936600461305d565b610f9b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9b586c280000000000000000000000000000000000000000000000000000000014806103c85750604080517f4c454e535f4d4f44554c450000000000000000000000000000000000000000006020808301919091528251600b818403018152602b90920190925280519101207fffffffff000000000000000000000000000000000000000000000000000000008381169116145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461043f576040517f9de9741800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3a08e775ac33980c7d5a647b877a3521afe04b580d844989ba8aa79d3d79db34868686868660405161047695949392919061307a565b60405180910390a1600061048a8484611057565b90506104958161117c565b6104a48160e0015188886112b4565b6104af8787836114be565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929a9950505050505050505050565b6040517f1c5ebe2f0000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631c5ebe2f90602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190613100565b905090565b61063a604080516101e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e08401839052610100840183905261012084018390526101408401839052610160840183905261018084018390526101a084018390528451908101855282815290810182905292830152906101c082015290565b5060009182526003602081815260408085209385529281529282902082516101e081018452815467ffffffffffffffff808216835268010000000000000000820481168388015263ffffffff7001000000000000000000000000000000008304811684880152740100000000000000000000000000000000000000008304166060808501919091527801000000000000000000000000000000000000000000000000909204166080830152600183015460a0830152600283015460c08301529282015460e0820152600482015461ffff8082166101008085019190915273ffffffffffffffffffffffffffffffffffffffff6201000093849004166101208501526005850154610140850152600685015460ff8082161515610160870152918104821615156101808601529290920490911615156101a08301528451938401855260078301548452600883015495840195909552600990910154909316918101919091526101c082015290565b6107af6116fd565b60016107bb82826131b8565b5050565b6107c76116fd565b6107d1600061177e565b565b60008281526004602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610871576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101610809565b50505050905092915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ee576040517f9de9741800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc1205783ea019e10746609025d26cc389e99e61935bc7e510f5ff18cdcb477538235602084013561092660a086016080870161305d565b6109346101008701876132d2565b60405161094595949392919061307a565b60405180910390a1600061095d6101008401846132d2565b81019061096a919061333e565b90506109e18335602085013561098360a0870187613357565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506109c79150506080890160608a0161305d565b60408901356109dc60a08b0160808c0161305d565b6117f3565b6109ef6101008401846132d2565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450505050505b919050565b600082815260036020908152604080832084845290915290205467ffffffffffffffff16421015610a8a576040517f830d593c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260036020908152604080832084845290915290205468010000000000000000900467ffffffffffffffff161580610b05575060008281526003602090815260408083208484529091529020547801000000000000000000000000000000000000000000000000900467ffffffffffffffff164211155b15610b3c576040517fb3bfd5dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600360209081526040808320848452909152902060060154610100900460ff1615610b98576040517f908fb28200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526003602090815260408083208484529091528082206005015490517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6791906133bf565b90506000610c9685857f0000000000000000000000000000000000000000000000000000000000000000611a20565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919250600091831690636a627842906024016020604051808303816000875af1158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e91906133dc565b6000878152600360209081526040808320898452909152902060060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179081905590915062010000900460ff16610d9057610d908686611ac2565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290524260608201528490869088907fffacc2ad1db7f4e40ce87df8b03259342ab38b1fbe956d2f7f9e9ea12bdc86819060800160405180910390a4505050505050565b606060018054610e0b9061311d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e379061311d565b8015610e845780601f10610e5957610100808354040283529160200191610e84565b820191906000526020600020905b815481529060010190602001808311610e6757829003601f168201915b5050505050905090565b6000610e986116fd565b610ea06104f1565b15610eab5750600190565b6040517f41ab44ee000000000000000000000000000000000000000000000000000000008152306004820152600160248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906341ab44ee906044016020604051808303816000875af1158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190613100565b905080156105a2576040517fb24617d9cac8b35b25b3bcaf3eb7e8e8e1cbed6ee116121e4e1c08a97743106290600090a1905090565b610fa36116fd565b73ffffffffffffffffffffffffffffffffffffffff811661104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6110548161177e565b50565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201526101008101829052610120810182905261014081018290526101608101919091526000806000806000806000806000806000808e8e8101906110d89190613508565b604080516101808101825267ffffffffffffffff909d168d5263ffffffff9b8c1660208e01529a909916998b019990995260608a0196909652608089019490945261ffff92831660a089015273ffffffffffffffffffffffffffffffffffffffff90911660c088015260e0870152901515610100860152610120850191909152610140840192909252166101608201529c5050505050505050505050505092915050565b602081015163ffffffff1615806111a65750806040015163ffffffff16816020015163ffffffff16105b80611265575060c08101516040517ff21b24d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063f21b24d790602401602060405180830381865afa15801561123f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112639190613100565b155b8061127d575061271061ffff168160a0015161ffff16115b15611054576040517f48be0eb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825160018110156112f1576040517f48be0eb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581111561132c576040517f5531b49500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8281101561147b5785818151811061134a5761134a6135e5565b60200260200101516020015161ffff16600003611393576040517f409bab8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8581815181106113a5576113a56135e5565b60200260200101516020015161ffff16826113c09190613643565b600086815260046020908152604080832088845290915290208751919350908790839081106113f1576113f16135e5565b602090810291909101810151825460018181018555600094855293839020825191018054929093015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090921673ffffffffffffffffffffffffffffffffffffffff9091161717905501611330565b61271082146114b6576040517f657e43c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000600360008581526020019081526020016000206000848152602001908152602001600020905081600001518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081602001518160000160106101000a81548163ffffffff021916908363ffffffff16021790555081604001518160000160146101000a81548163ffffffff021916908363ffffffff16021790555081606001518160010181905550816080015181600201819055508160a001518160040160006101000a81548161ffff021916908361ffff1602179055508160c001518160040160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161010001518160060160006101000a81548160ff02191690831515021790555060405180606001604052808361012001518152602001836101400151815260200183610160015161ffff1681525081600701600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff16021790555090505082847f5ca55d22d46e60a0b3425062d4d5ae0810c30aef16e4d98c2733f63f04726dd1846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518d61012001518e61014001518f61016001516040516116ef9c9b9a99989796959493929190613656565b60405180910390a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611042565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008781526003602081815260408084208a855282529283902083516101e081018552815467ffffffffffffffff808216835268010000000000000000820481168386015263ffffffff7001000000000000000000000000000000008304811684890152740100000000000000000000000000000000000000008304166060808501919091527801000000000000000000000000000000000000000000000000909204166080830152600183015460a0830152600283015460c08301529382015460e0820152600482015461ffff8082166101008085019190915273ffffffffffffffffffffffffffffffffffffffff6201000093849004166101208501526005850154610140850152600685015460ff8082161515610160870152918104821615156101808601529290920490911615156101a08301528551948501865260078301548552600883015493850193909352600990910154909116928201929092526101c082015261196788868584611ccb565b61197388888886611d79565b60006119828989888786611e00565b6101208301519091506119ad9073ffffffffffffffffffffffffffffffffffffffff16843089611f63565b60008981526005602090815260408083208b8452825280832087845290915290819020905189918b917f3a22c344293f7594bd6642815ae1081eeeb72fa32b6ad4746d070f3a00bd201891611a0d918b908b908b908b908a904290613704565b60405180910390a3505050505050505050565b600083815260026020908152604080832085845290915281205473ffffffffffffffffffffffffffffffffffffffff1680611aba57611a6085858561203f565b6000868152600260209081526040808320888452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905590505b949350505050565b600082815260036020908152604080832084845282528083206006810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000017905585845260058084528285208686528452828520910154845282528083208584526004835281842085855283528184208054835181860281018601909452808452919493909190849084015b82821015611bbd576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101611b55565b50508454929350509015905080611bf057508382600081548110611be357611be36135e5565b9060005260206000200154145b15611c4557600084815260036020818152604080842087855290915290912090810154600490910154611c40919062010000900473ffffffffffffffffffffffffffffffffffffffff1683612179565b611c98565b600084815260036020818152604080842087855290915290912090810154600490910154611c98919061ffff811690859062010000900473ffffffffffffffffffffffffffffffffffffffff1685612285565b82847fa72767c83a84be51143fa5ae1e4e5ede2e15c027e1879e7edf0d523b0723c58d426040516116ef91815260200190565b604081015163ffffffff161580611cec5750805167ffffffffffffffff1642105b80611d1d57506000816020015167ffffffffffffffff16118015611d1d5750806080015167ffffffffffffffff1642115b15611d54576040517f830d593c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d5e81846124d7565b80610160015115611d7357611d73828561256c565b50505050565b60008481526005602090815260408083208684528252808320848452909152902080541580611dc5575080600081548110611db657611db66135e5565b90600052602060002001546000145b15611df95760008581526005602090815260408083208784528252808320858452825290912084516114b692860190612b1c565b5050505050565b6000858152600360208181526040808420888552909152822060058101859055908101859055608083015161014084015167ffffffffffffffff909116908303611ee0576040840151611e599063ffffffff1642613643565b82544267ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9184167801000000000000000000000000000000000000000000000000029190911677ffffffffffffffff0000000000000000ffffffffffffffff909216919091171783559050611f58565b606084015163ffffffff16611ef542836137ae565b1015611f58576060840151611f109063ffffffff1642613643565b825477ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff83160217835590505b979650505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611d739085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612663565b60008061204b83612772565b6000868152600360209081526040808320888452909152902060078101549192509073ffffffffffffffffffffffffffffffffffffffff8316906337d09588908890889061209890612835565b60088601546120a690612835565b60098701546040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526120ec959493929161ffff16906004016137c1565b600060405180830381600087803b15801561210657600080fd5b505af115801561211a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1685877f0b227b550ffed48af813b32e246f787e99581ee13206ba8f9d90d63615269b3f4260405161216891815260200190565b60405180910390a450949350505050565b6000806121846128cc565b9092509050600061271061219c61ffff841688613809565b6121a69190613820565b905060006121b482886137ae565b905081156121dd576121dd73ffffffffffffffffffffffffffffffffffffffff87168584612965565b845160005b8181101561227a57600061271061ffff16888381518110612205576122056135e5565b60200260200101516020015161ffff16856122209190613809565b61222a9190613820565b9050801561227157612271888381518110612247576122476135e5565b60209081029190910101515173ffffffffffffffffffffffffffffffffffffffff8b169083612965565b506001016121e2565b505050505050505050565b6000806122906128cc565b909250905060006127106122a861ffff84168a613809565b6122b29190613820565b905060006122c0828a6137ae565b905081156122e9576122e973ffffffffffffffffffffffffffffffffffffffff87168584612965565b600061ffff89161561241f5761271061230661ffff8b1684613809565b6123109190613820565b885490915060006123218284613820565b9050801561241c5760005b8281101561241a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e8d8481548110612384576123846135e5565b90600052602060002001546040518263ffffffff1660e01b81526004016123ad91815260200190565b602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906133bf565b905061241173ffffffffffffffffffffffffffffffffffffffff8c168285612965565b5060010161232c565b505b50505b61242981836137ae565b865190925060005b818110156124c957600061271061ffff16898381518110612454576124546135e5565b60200260200101516020015161ffff168661246f9190613809565b6124799190613820565b905080156124c0576124c0898381518110612496576124966135e5565b60209081029190910101515173ffffffffffffffffffffffffffffffffffffffff8c169083612965565b50600101612431565b505050505050505050505050565b610140820151158080156124ee57508260a0015182105b8061253057508015801561253057508260e0015182111580612530575060008360c00151118015612530575060c083015160e084015161252e90846137ae565b105b15612567576040517fad25236500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b808203612577575050565b6040517f47720ebb00000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906347720ebb90604401602060405180830381865afa158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190613100565b6107bb576040517f8b67bbcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006126c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129bb9092919063ffffffff16565b90508051600014806126e65750808060200190518101906126e69190613100565b612567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611042565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116610a28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401611042565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b60208110156128c557838160208110612878576128786135e5565b1a60f81b82828151811061288e5761288e6135e5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161285d565b5092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166398f965d16040518163ffffffff1660e01b81526004016040805180830381865afa158015612939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295d919061385b565b915091509091565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526125679084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611fbd565b6060611aba8484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129ef9190613895565b60006040518083038185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5091509150611f588783838760608315612ad3578251600003612acc5773ffffffffffffffffffffffffffffffffffffffff85163b612acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611042565b5081611aba565b611aba8383815115612ae85781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110429190612ceb565b828054828255906000526020600020908101928215612b57579160200282015b82811115612b57578251825591602001919060010190612b3c565b50612b63929150612b67565b5090565b5b80821115612b635760008155600101612b68565b600060208284031215612b8e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612bbe57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461105457600080fd5b600080600080600060808688031215612bff57600080fd5b85359450602086013593506040860135612c1881612bc5565b9250606086013567ffffffffffffffff80821115612c3557600080fd5b818801915088601f830112612c4957600080fd5b813581811115612c5857600080fd5b896020828501011115612c6a57600080fd5b9699959850939650602001949392505050565b60005b83811015612c98578181015183820152602001612c80565b50506000910152565b60008151808452612cb9816020860160208601612c7d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612bbe6020830184612ca1565b60008060408385031215612d1157600080fd5b50508035926020909101359150565b815167ffffffffffffffff16815261022081016020830151612d4e602084018267ffffffffffffffff169052565b506040830151612d66604084018263ffffffff169052565b506060830151612d7e606084018263ffffffff169052565b506080830151612d9a608084018267ffffffffffffffff169052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151612dcf8285018261ffff169052565b50506101208381015173ffffffffffffffffffffffffffffffffffffffff1690830152610140808401519083015261016080840151151590830152610180808401511515908301526101a0808401511515908301526101c09283015180519383019390935260208301516101e083015260409092015161ffff166102009091015290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612ea557612ea5612e53565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612ef257612ef2612e53565b604052919050565b60006020808385031215612f0d57600080fd5b823567ffffffffffffffff80821115612f2557600080fd5b818501915085601f830112612f3957600080fd5b813581811115612f4b57612f4b612e53565b612f7b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612eab565b91508082528684828501011115612f9157600080fd5b8084840185840137600090820190930192909252509392505050565b60008151808452602080850194506020840160005b83811015613003578151805173ffffffffffffffffffffffffffffffffffffffff16885283015161ffff168388015260409096019590820190600101612fc2565b509495945050505050565b602081526000612bbe6020830184612fad565b60006020828403121561303357600080fd5b813567ffffffffffffffff81111561304a57600080fd5b82016101208185031215612bbe57600080fd5b60006020828403121561306f57600080fd5b8135612bbe81612bc5565b85815284602082015273ffffffffffffffffffffffffffffffffffffffff8416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b801515811461105457600080fd5b60006020828403121561311257600080fd5b8151612bbe816130f2565b600181811c9082168061313157607f821691505b60208210810361316a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115612567576000816000526020600020601f850160051c810160208610156131995750805b601f850160051c820191505b818110156114b6578281556001016131a5565b815167ffffffffffffffff8111156131d2576131d2612e53565b6131e6816131e0845461311d565b84613170565b602080601f83116001811461323957600084156132035750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556114b6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561328657888601518255948401946001909101908401613267565b50858210156132c257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261330757600080fd5b83018035915067ffffffffffffffff82111561332257600080fd5b60200191503681900382131561333757600080fd5b9250929050565b60006020828403121561335057600080fd5b5035919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261338c57600080fd5b83018035915067ffffffffffffffff8211156133a757600080fd5b6020019150600581901b360382131561333757600080fd5b6000602082840312156133d157600080fd5b8151612bbe81612bc5565b6000602082840312156133ee57600080fd5b5051919050565b803567ffffffffffffffff81168114610a2857600080fd5b803563ffffffff81168114610a2857600080fd5b61ffff8116811461105457600080fd5b8035610a2881613421565b8035610a2881612bc5565b600082601f83011261345857600080fd5b8135602067ffffffffffffffff82111561347457613474612e53565b613482818360051b01612eab565b82815260069290921b840181019181810190868411156134a157600080fd5b8286015b848110156134f257604081890312156134be5760008081fd5b6134c6612e82565b81356134d181612bc5565b8152818501356134e081613421565b818601528352918301916040016134a5565b509695505050505050565b8035610a28816130f2565b6000806000806000806000806000806000806101808d8f03121561352b57600080fd5b6135348d6133f5565b9b5061354260208e0161340d565b9a5061355060408e0161340d565b995060608d0135985060808d0135975061356c60a08e01613431565b965061357a60c08e0161343c565b955067ffffffffffffffff60e08e0135111561359557600080fd5b6135a58e60e08f01358f01613447565b94506135b46101008e016134fd565b93506101208d013592506101408d013591506135d36101608e01613431565b90509295989b509295989b509295989b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103c8576103c8613614565b600061018067ffffffffffffffff8f16835263ffffffff808f166020850152808e166040850152508b60608401528a608084015261ffff8a1660a084015273ffffffffffffffffffffffffffffffffffffffff891660c08401528060e08401526136c281840189612fad565b9150506136d461010083018715159052565b84610120830152836101408301526136f361016083018461ffff169052565b9d9c50505050505050505050505050565b600060e0820160e08352808a54808352610100850191508b60005260209250602060002060005b828110156137475781548452928401926001918201910161372b565b505050809250505087602083015273ffffffffffffffffffffffffffffffffffffffff87166040830152856060830152613799608083018673ffffffffffffffffffffffffffffffffffffffff169052565b60a082019390935260c0015295945050505050565b818103818111156103c8576103c8613614565b85815284602082015260a0604082015260006137e060a0830186612ca1565b82810360608401526137f28186612ca1565b91505061ffff831660808301529695505050505050565b80820281158282048414176103c8576103c8613614565b600082613856577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000806040838503121561386e57600080fd5b825161387981612bc5565b602084015190925061388a81613421565b809150509250929050565b600082516138a7818460208701612c7d565b919091019291505056fea264697066735822122007bd6a1693da559e1b503ec02c5deecab959d0b57539f31406e9d4ad72fc99cf64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011a5760003560e01c8063861ff101116100b2578063b95ddb5211610081578063ce90d52e11610066578063ce90d52e146102eb578063e0f0da85146102f3578063f2fde38b146102fb57600080fd5b8063b95ddb52146102b1578063c3490263146102d857600080fd5b8063861ff101146102395780638da5cb5b1461025957806390ce6e0814610277578063a4c52b861461028a57600080fd5b8063417f3c3d116100ee578063417f3c3d146101bb57806352aaef55146101db578063681591c11461021c578063715018a61461023157600080fd5b8062a7c89b1461011f57806301ffc9a7146101705780630b9602201461019357806322366844146101b3575b600080fd5b6101467f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61018361017e366004612b7c565b61030e565b6040519015158152602001610167565b6101a66101a1366004612be7565b6103ce565b6040516101679190612ceb565b6101836104f1565b6101ce6101c9366004612cfe565b6105a7565b6040516101679190612d20565b6101466101e9366004612cfe565b600091825260026020908152604080842092845291905290205473ffffffffffffffffffffffffffffffffffffffff1690565b61022f61022a366004612efa565b6107a7565b005b61022f6107bf565b61024c610247366004612cfe565b6107d3565b604051610167919061300e565b60005473ffffffffffffffffffffffffffffffffffffffff16610146565b6101a6610285366004613021565b61087d565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b6101467f000000000000000000000000000000000000000000000000000000000000000081565b61022f6102e6366004612cfe565b610a2d565b6101a6610dfc565b610183610e8e565b61022f61030936600461305d565b610f9b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9b586c280000000000000000000000000000000000000000000000000000000014806103c85750604080517f4c454e535f4d4f44554c450000000000000000000000000000000000000000006020808301919091528251600b818403018152602b90920190925280519101207fffffffff000000000000000000000000000000000000000000000000000000008381169116145b92915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461043f576040517f9de9741800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3a08e775ac33980c7d5a647b877a3521afe04b580d844989ba8aa79d3d79db34868686868660405161047695949392919061307a565b60405180910390a1600061048a8484611057565b90506104958161117c565b6104a48160e0015188886112b4565b6104af8787836114be565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929a9950505050505050505050565b6040517f1c5ebe2f0000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631c5ebe2f90602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190613100565b905090565b61063a604080516101e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e08401839052610100840183905261012084018390526101408401839052610160840183905261018084018390526101a084018390528451908101855282815290810182905292830152906101c082015290565b5060009182526003602081815260408085209385529281529282902082516101e081018452815467ffffffffffffffff808216835268010000000000000000820481168388015263ffffffff7001000000000000000000000000000000008304811684880152740100000000000000000000000000000000000000008304166060808501919091527801000000000000000000000000000000000000000000000000909204166080830152600183015460a0830152600283015460c08301529282015460e0820152600482015461ffff8082166101008085019190915273ffffffffffffffffffffffffffffffffffffffff6201000093849004166101208501526005850154610140850152600685015460ff8082161515610160870152918104821615156101808601529290920490911615156101a08301528451938401855260078301548452600883015495840195909552600990910154909316918101919091526101c082015290565b6107af6116fd565b60016107bb82826131b8565b5050565b6107c76116fd565b6107d1600061177e565b565b60008281526004602090815260408083208484528252808320805482518185028101850190935280835260609492939192909184015b82821015610871576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101610809565b50505050905092915050565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ee576040517f9de9741800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc1205783ea019e10746609025d26cc389e99e61935bc7e510f5ff18cdcb477538235602084013561092660a086016080870161305d565b6109346101008701876132d2565b60405161094595949392919061307a565b60405180910390a1600061095d6101008401846132d2565b81019061096a919061333e565b90506109e18335602085013561098360a0870187613357565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792506109c79150506080890160608a0161305d565b60408901356109dc60a08b0160808c0161305d565b6117f3565b6109ef6101008401846132d2565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450505050505b919050565b600082815260036020908152604080832084845290915290205467ffffffffffffffff16421015610a8a576040517f830d593c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260036020908152604080832084845290915290205468010000000000000000900467ffffffffffffffff161580610b05575060008281526003602090815260408083208484529091529020547801000000000000000000000000000000000000000000000000900467ffffffffffffffff164211155b15610b3c576040517fb3bfd5dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600360209081526040808320848452909152902060060154610100900460ff1615610b98576040517f908fb28200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526003602090815260408083208484529091528082206005015490517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6791906133bf565b90506000610c9685857f0000000000000000000000000000000000000000000000000000000000000000611a20565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919250600091831690636a627842906024016020604051808303816000875af1158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e91906133dc565b6000878152600360209081526040808320898452909152902060060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179081905590915062010000900460ff16610d9057610d908686611ac2565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290524260608201528490869088907fffacc2ad1db7f4e40ce87df8b03259342ab38b1fbe956d2f7f9e9ea12bdc86819060800160405180910390a4505050505050565b606060018054610e0b9061311d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e379061311d565b8015610e845780601f10610e5957610100808354040283529160200191610e84565b820191906000526020600020905b815481529060010190602001808311610e6757829003601f168201915b5050505050905090565b6000610e986116fd565b610ea06104f1565b15610eab5750600190565b6040517f41ab44ee000000000000000000000000000000000000000000000000000000008152306004820152600160248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906341ab44ee906044016020604051808303816000875af1158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190613100565b905080156105a2576040517fb24617d9cac8b35b25b3bcaf3eb7e8e8e1cbed6ee116121e4e1c08a97743106290600090a1905090565b610fa36116fd565b73ffffffffffffffffffffffffffffffffffffffff811661104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6110548161177e565b50565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201526101008101829052610120810182905261014081018290526101608101919091526000806000806000806000806000806000808e8e8101906110d89190613508565b604080516101808101825267ffffffffffffffff909d168d5263ffffffff9b8c1660208e01529a909916998b019990995260608a0196909652608089019490945261ffff92831660a089015273ffffffffffffffffffffffffffffffffffffffff90911660c088015260e0870152901515610100860152610120850191909152610140840192909252166101608201529c5050505050505050505050505092915050565b602081015163ffffffff1615806111a65750806040015163ffffffff16816020015163ffffffff16105b80611265575060c08101516040517ff21b24d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063f21b24d790602401602060405180830381865afa15801561123f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112639190613100565b155b8061127d575061271061ffff168160a0015161ffff16115b15611054576040517f48be0eb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825160018110156112f1576040517f48be0eb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581111561132c576040517f5531b49500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8281101561147b5785818151811061134a5761134a6135e5565b60200260200101516020015161ffff16600003611393576040517f409bab8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8581815181106113a5576113a56135e5565b60200260200101516020015161ffff16826113c09190613643565b600086815260046020908152604080832088845290915290208751919350908790839081106113f1576113f16135e5565b602090810291909101810151825460018181018555600094855293839020825191018054929093015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090921673ffffffffffffffffffffffffffffffffffffffff9091161717905501611330565b61271082146114b6576040517f657e43c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000600360008581526020019081526020016000206000848152602001908152602001600020905081600001518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081602001518160000160106101000a81548163ffffffff021916908363ffffffff16021790555081604001518160000160146101000a81548163ffffffff021916908363ffffffff16021790555081606001518160010181905550816080015181600201819055508160a001518160040160006101000a81548161ffff021916908361ffff1602179055508160c001518160040160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161010001518160060160006101000a81548160ff02191690831515021790555060405180606001604052808361012001518152602001836101400151815260200183610160015161ffff1681525081600701600082015181600001556020820151816001015560408201518160020160006101000a81548161ffff021916908361ffff16021790555090505082847f5ca55d22d46e60a0b3425062d4d5ae0810c30aef16e4d98c2733f63f04726dd1846000015185602001518660400151876060015188608001518960a001518a60c001518b60e001518c61010001518d61012001518e61014001518f61016001516040516116ef9c9b9a99989796959493929190613656565b60405180910390a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611042565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008781526003602081815260408084208a855282529283902083516101e081018552815467ffffffffffffffff808216835268010000000000000000820481168386015263ffffffff7001000000000000000000000000000000008304811684890152740100000000000000000000000000000000000000008304166060808501919091527801000000000000000000000000000000000000000000000000909204166080830152600183015460a0830152600283015460c08301529382015460e0820152600482015461ffff8082166101008085019190915273ffffffffffffffffffffffffffffffffffffffff6201000093849004166101208501526005850154610140850152600685015460ff8082161515610160870152918104821615156101808601529290920490911615156101a08301528551948501865260078301548552600883015493850193909352600990910154909116928201929092526101c082015261196788868584611ccb565b61197388888886611d79565b60006119828989888786611e00565b6101208301519091506119ad9073ffffffffffffffffffffffffffffffffffffffff16843089611f63565b60008981526005602090815260408083208b8452825280832087845290915290819020905189918b917f3a22c344293f7594bd6642815ae1081eeeb72fa32b6ad4746d070f3a00bd201891611a0d918b908b908b908b908a904290613704565b60405180910390a3505050505050505050565b600083815260026020908152604080832085845290915281205473ffffffffffffffffffffffffffffffffffffffff1680611aba57611a6085858561203f565b6000868152600260209081526040808320888452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905590505b949350505050565b600082815260036020908152604080832084845282528083206006810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000017905585845260058084528285208686528452828520910154845282528083208584526004835281842085855283528184208054835181860281018601909452808452919493909190849084015b82821015611bbd576000848152602090819020604080518082019091529084015473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000900461ffff1681830152825260019092019101611b55565b50508454929350509015905080611bf057508382600081548110611be357611be36135e5565b9060005260206000200154145b15611c4557600084815260036020818152604080842087855290915290912090810154600490910154611c40919062010000900473ffffffffffffffffffffffffffffffffffffffff1683612179565b611c98565b600084815260036020818152604080842087855290915290912090810154600490910154611c98919061ffff811690859062010000900473ffffffffffffffffffffffffffffffffffffffff1685612285565b82847fa72767c83a84be51143fa5ae1e4e5ede2e15c027e1879e7edf0d523b0723c58d426040516116ef91815260200190565b604081015163ffffffff161580611cec5750805167ffffffffffffffff1642105b80611d1d57506000816020015167ffffffffffffffff16118015611d1d5750806080015167ffffffffffffffff1642115b15611d54576040517f830d593c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d5e81846124d7565b80610160015115611d7357611d73828561256c565b50505050565b60008481526005602090815260408083208684528252808320848452909152902080541580611dc5575080600081548110611db657611db66135e5565b90600052602060002001546000145b15611df95760008581526005602090815260408083208784528252808320858452825290912084516114b692860190612b1c565b5050505050565b6000858152600360208181526040808420888552909152822060058101859055908101859055608083015161014084015167ffffffffffffffff909116908303611ee0576040840151611e599063ffffffff1642613643565b82544267ffffffffffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9184167801000000000000000000000000000000000000000000000000029190911677ffffffffffffffff0000000000000000ffffffffffffffff909216919091171783559050611f58565b606084015163ffffffff16611ef542836137ae565b1015611f58576060840151611f109063ffffffff1642613643565b825477ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff83160217835590505b979650505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611d739085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612663565b60008061204b83612772565b6000868152600360209081526040808320888452909152902060078101549192509073ffffffffffffffffffffffffffffffffffffffff8316906337d09588908890889061209890612835565b60088601546120a690612835565b60098701546040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526120ec959493929161ffff16906004016137c1565b600060405180830381600087803b15801561210657600080fd5b505af115801561211a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1685877f0b227b550ffed48af813b32e246f787e99581ee13206ba8f9d90d63615269b3f4260405161216891815260200190565b60405180910390a450949350505050565b6000806121846128cc565b9092509050600061271061219c61ffff841688613809565b6121a69190613820565b905060006121b482886137ae565b905081156121dd576121dd73ffffffffffffffffffffffffffffffffffffffff87168584612965565b845160005b8181101561227a57600061271061ffff16888381518110612205576122056135e5565b60200260200101516020015161ffff16856122209190613809565b61222a9190613820565b9050801561227157612271888381518110612247576122476135e5565b60209081029190910101515173ffffffffffffffffffffffffffffffffffffffff8b169083612965565b506001016121e2565b505050505050505050565b6000806122906128cc565b909250905060006127106122a861ffff84168a613809565b6122b29190613820565b905060006122c0828a6137ae565b905081156122e9576122e973ffffffffffffffffffffffffffffffffffffffff87168584612965565b600061ffff89161561241f5761271061230661ffff8b1684613809565b6123109190613820565b885490915060006123218284613820565b9050801561241c5760005b8281101561241a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e8d8481548110612384576123846135e5565b90600052602060002001546040518263ffffffff1660e01b81526004016123ad91815260200190565b602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906133bf565b905061241173ffffffffffffffffffffffffffffffffffffffff8c168285612965565b5060010161232c565b505b50505b61242981836137ae565b865190925060005b818110156124c957600061271061ffff16898381518110612454576124546135e5565b60200260200101516020015161ffff168661246f9190613809565b6124799190613820565b905080156124c0576124c0898381518110612496576124966135e5565b60209081029190910101515173ffffffffffffffffffffffffffffffffffffffff8c169083612965565b50600101612431565b505050505050505050505050565b610140820151158080156124ee57508260a0015182105b8061253057508015801561253057508260e0015182111580612530575060008360c00151118015612530575060c083015160e084015161252e90846137ae565b105b15612567576040517fad25236500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b808203612577575050565b6040517f47720ebb00000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906347720ebb90604401602060405180830381865afa158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190613100565b6107bb576040517f8b67bbcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006126c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129bb9092919063ffffffff16565b90508051600014806126e65750808060200190518101906126e69190613100565b612567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611042565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116610a28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401611042565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b60208110156128c557838160208110612878576128786135e5565b1a60f81b82828151811061288e5761288e6135e5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161285d565b5092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166398f965d16040518163ffffffff1660e01b81526004016040805180830381865afa158015612939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295d919061385b565b915091509091565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526125679084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611fbd565b6060611aba8484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129ef9190613895565b60006040518083038185875af1925050503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5091509150611f588783838760608315612ad3578251600003612acc5773ffffffffffffffffffffffffffffffffffffffff85163b612acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611042565b5081611aba565b611aba8383815115612ae85781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110429190612ceb565b828054828255906000526020600020908101928215612b57579160200282015b82811115612b57578251825591602001919060010190612b3c565b50612b63929150612b67565b5090565b5b80821115612b635760008155600101612b68565b600060208284031215612b8e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612bbe57600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461105457600080fd5b600080600080600060808688031215612bff57600080fd5b85359450602086013593506040860135612c1881612bc5565b9250606086013567ffffffffffffffff80821115612c3557600080fd5b818801915088601f830112612c4957600080fd5b813581811115612c5857600080fd5b896020828501011115612c6a57600080fd5b9699959850939650602001949392505050565b60005b83811015612c98578181015183820152602001612c80565b50506000910152565b60008151808452612cb9816020860160208601612c7d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612bbe6020830184612ca1565b60008060408385031215612d1157600080fd5b50508035926020909101359150565b815167ffffffffffffffff16815261022081016020830151612d4e602084018267ffffffffffffffff169052565b506040830151612d66604084018263ffffffff169052565b506060830151612d7e606084018263ffffffff169052565b506080830151612d9a608084018267ffffffffffffffff169052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151612dcf8285018261ffff169052565b50506101208381015173ffffffffffffffffffffffffffffffffffffffff1690830152610140808401519083015261016080840151151590830152610180808401511515908301526101a0808401511515908301526101c09283015180519383019390935260208301516101e083015260409092015161ffff166102009091015290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612ea557612ea5612e53565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612ef257612ef2612e53565b604052919050565b60006020808385031215612f0d57600080fd5b823567ffffffffffffffff80821115612f2557600080fd5b818501915085601f830112612f3957600080fd5b813581811115612f4b57612f4b612e53565b612f7b847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612eab565b91508082528684828501011115612f9157600080fd5b8084840185840137600090820190930192909252509392505050565b60008151808452602080850194506020840160005b83811015613003578151805173ffffffffffffffffffffffffffffffffffffffff16885283015161ffff168388015260409096019590820190600101612fc2565b509495945050505050565b602081526000612bbe6020830184612fad565b60006020828403121561303357600080fd5b813567ffffffffffffffff81111561304a57600080fd5b82016101208185031215612bbe57600080fd5b60006020828403121561306f57600080fd5b8135612bbe81612bc5565b85815284602082015273ffffffffffffffffffffffffffffffffffffffff8416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b801515811461105457600080fd5b60006020828403121561311257600080fd5b8151612bbe816130f2565b600181811c9082168061313157607f821691505b60208210810361316a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115612567576000816000526020600020601f850160051c810160208610156131995750805b601f850160051c820191505b818110156114b6578281556001016131a5565b815167ffffffffffffffff8111156131d2576131d2612e53565b6131e6816131e0845461311d565b84613170565b602080601f83116001811461323957600084156132035750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556114b6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561328657888601518255948401946001909101908401613267565b50858210156132c257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261330757600080fd5b83018035915067ffffffffffffffff82111561332257600080fd5b60200191503681900382131561333757600080fd5b9250929050565b60006020828403121561335057600080fd5b5035919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261338c57600080fd5b83018035915067ffffffffffffffff8211156133a757600080fd5b6020019150600581901b360382131561333757600080fd5b6000602082840312156133d157600080fd5b8151612bbe81612bc5565b6000602082840312156133ee57600080fd5b5051919050565b803567ffffffffffffffff81168114610a2857600080fd5b803563ffffffff81168114610a2857600080fd5b61ffff8116811461105457600080fd5b8035610a2881613421565b8035610a2881612bc5565b600082601f83011261345857600080fd5b8135602067ffffffffffffffff82111561347457613474612e53565b613482818360051b01612eab565b82815260069290921b840181019181810190868411156134a157600080fd5b8286015b848110156134f257604081890312156134be5760008081fd5b6134c6612e82565b81356134d181612bc5565b8152818501356134e081613421565b818601528352918301916040016134a5565b509695505050505050565b8035610a28816130f2565b6000806000806000806000806000806000806101808d8f03121561352b57600080fd5b6135348d6133f5565b9b5061354260208e0161340d565b9a5061355060408e0161340d565b995060608d0135985060808d0135975061356c60a08e01613431565b965061357a60c08e0161343c565b955067ffffffffffffffff60e08e0135111561359557600080fd5b6135a58e60e08f01358f01613447565b94506135b46101008e016134fd565b93506101208d013592506101408d013591506135d36101608e01613431565b90509295989b509295989b509295989b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156103c8576103c8613614565b600061018067ffffffffffffffff8f16835263ffffffff808f166020850152808e166040850152508b60608401528a608084015261ffff8a1660a084015273ffffffffffffffffffffffffffffffffffffffff891660c08401528060e08401526136c281840189612fad565b9150506136d461010083018715159052565b84610120830152836101408301526136f361016083018461ffff169052565b9d9c50505050505050505050505050565b600060e0820160e08352808a54808352610100850191508b60005260209250602060002060005b828110156137475781548452928401926001918201910161372b565b505050809250505087602083015273ffffffffffffffffffffffffffffffffffffffff87166040830152856060830152613799608083018673ffffffffffffffffffffffffffffffffffffffff169052565b60a082019390935260c0015295945050505050565b818103818111156103c8576103c8613614565b85815284602082015260a0604082015260006137e060a0830186612ca1565b82810360608401526137f28186612ca1565b91505061ffff831660808301529695505050505050565b80820281158282048414176103c8576103c8613614565b600082613856577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000806040838503121561386e57600080fd5b825161387981612bc5565b602084015190925061388a81613421565b809150509250929050565b600082516138a7818460208701612c7d565b919091019291505056fea264697066735822122007bd6a1693da559e1b503ec02c5deecab959d0b57539f31406e9d4ad72fc99cf64736f6c63430008170033",
  "devdoc": {
    "author": "donosonaumczuk, Martijn van Halen and Paul Burke",
    "events": {
      "CollectNFTDeployed(uint256,uint256,address,uint256)": {
        "details": "Emitted when a collectNFT clone is deployed using a lazy deployment pattern.",
        "params": {
          "collectNFT": "The address of the newly deployed collectNFT clone.",
          "profileId": "The publisher's profile token ID.",
          "pubId": "The publication associated with the newly deployed collectNFT clone's ID.",
          "timestamp": "The current block timestamp."
        }
      },
      "Collected(uint256,uint256,uint256,address,address,uint256,uint256)": {
        "details": "Emitted upon a successful collect action.",
        "params": {
          "collectNFT": "The address of the NFT collection where the minted collect NFT belongs to.",
          "collectedProfileId": "The token ID of the profile that published the collected publication.",
          "collectedPubId": "The ID of the collected publication.",
          "collectorProfileId": "The token ID of the profile that collected the publication.",
          "nftRecipient": "The address that received the collect NFT. and depends on the collect module chosen.",
          "timestamp": "The current block timestamp.",
          "tokenId": "The token ID of the collect NFT that was minted as a collect of the publication."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claim(uint256,uint256)": {
        "details": "Process the collect by ensuring:  1. Underlying publication's auction has finished.  2. Parameters passed matches expected values (collector is the winner, correct referral info & no custom data).  3. Publication has not been collected yet. This function will also process collect fees if they have not been already processed through `processCollectFee`."
      },
      "getAuctionData(uint256,uint256)": {
        "params": {
          "profileId": "The token ID of the profile associated with the underlying publication.",
          "pubId": "The publication ID associated with the underlying publication."
        },
        "returns": {
          "_0": "The auction data for the given publication."
        }
      },
      "initializePublicationAction(uint256,uint256,address,bytes)": {
        "details": "See `AuctionData` struct's natspec in order to understand `data` decoded values."
      },
      "isRegistered()": {
        "details": "Checks if the module is registered in the module registry",
        "returns": {
          "_0": "True if the module is registered, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerModule()": {
        "details": "Registers the open action in the module registry",
        "returns": {
          "_0": "True if the module was registered, false otherwise"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "for now we check for keccak('LENS_MODULE'); Override this and add the type(IModuleInterface).interfaceId for corresponding module type"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_referrerProfileIdByPubByProfile": {
        "details": "Maps a given bidder's profile ID to its referrer profile IDs. Referrer matching publication's profile ID means no referral, referrer being zero means that bidder has not bidded yet on this auction. The referrer is set through, and only through, the first bidder's bid on each auction."
      }
    },
    "title": "AuctionCollectActionModule",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAuctionData(uint256,uint256)": {
        "notice": "If the given publication has an auction, this function returns all its information."
      },
      "getModuleMetadataURI()": {
        "notice": "Human-readable description of the module"
      },
      "processPublicationAction((uint256,uint256,uint256,address,address,uint256[],uint256[],uint8[],bytes))": {
        "notice": "this open action makes the bid as gasless Open action  params.actionModuleData contains amount The bid amount to offer."
      }
    },
    "notice": "This module works by creating an English auction for the underlying publication. After the auction ends, only the auction winner is allowed to collect the publication.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11022,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "metadataURI",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3347,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "_collectNFTByPub",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 3354,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "_auctionDataByPubByProfile",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(AuctionData)3163_storage))"
      },
      {
        "astId": 3362,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "_recipientsByPublicationByProfile",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(RecipientData)3122_storage)dyn_storage))"
      },
      {
        "astId": 3372,
        "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
        "label": "_referrerProfileIdByPubByProfile",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RecipientData)3122_storage)dyn_storage": {
        "base": "t_struct(RecipientData)3122_storage",
        "encoding": "dynamic_array",
        "label": "struct RecipientData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(RecipientData)3122_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RecipientData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RecipientData)3122_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_struct(RecipientData)3122_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct RecipientData[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(RecipientData)3122_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(AuctionData)3163_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct AuctionData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AuctionData)3163_storage)"
      },
      "t_mapping(t_uint256,t_struct(AuctionData)3163_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AuctionData)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionData)3163_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionData)3163_storage": {
        "encoding": "inplace",
        "label": "struct AuctionData",
        "members": [
          {
            "astId": 3133,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "availableSinceTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3135,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "startTimestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3137,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "duration",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3139,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "minTimeAfterBid",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3141,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "endTimestamp",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 3143,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "reservePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3145,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "minBidIncrement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3147,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "winningBid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3149,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "referralFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 3151,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "currency",
            "offset": 2,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3153,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "winnerProfileId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3155,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "onlyFollowers",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3157,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "collected",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3159,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "feeProcessed",
            "offset": 2,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3162,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "tokenData",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(TokenData)3130_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RecipientData)3122_storage": {
        "encoding": "inplace",
        "label": "struct RecipientData",
        "members": [
          {
            "astId": 3119,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3121,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "split",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)3130_storage": {
        "encoding": "inplace",
        "label": "struct TokenData",
        "members": [
          {
            "astId": 3125,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3127,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3129,
            "contract": "contracts/AuctionCollectAction.sol:AuctionCollectAction",
            "label": "royalty",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}